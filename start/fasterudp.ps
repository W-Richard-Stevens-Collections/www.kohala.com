%!PS-Adobe-3.0
%%Creator: groff version 1.08
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%+ font Helvetica
%%DocumentSuppliedResources: procset grops 1.08 0
%%Pages: 20
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.08 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll 
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
%%IncludeResource: font Helvetica
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72 def/PL
792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron/scaron/zcaron
/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/space
/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright/parenleft
/parenright/asterisk/plus/comma/hyphen/period/slash/zero/one/two/three/four
/five/six/seven/eight/nine/colon/semicolon/less/equal/greater/question/at/A/B/C
/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash
/bracketright/circumflex/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q
/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase
/guillemotleft/guillemotright/bullet/florin/fraction/perthousand/dagger
/daggerdbl/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guilsinglleft/logicalnot/minus
/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guilsinglright
/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde
/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]def/Helvetica@0 ENC0/Helvetica RE
/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 13/Times-Bold@0 SF 3.25(AF)263.575 91 S(aster UDP)283.829 91 Q/F1 12
/Times-Italic@0 SF(Cr)217.698 117 Q(aig P)-.18 E(artridg)-.96 E
(e* and Stephen Pink)-.12 E/F2 12/Times-Roman@0 SF
(Swedish Institute of Computer Science)208.74 136.5 Q/F3 10/Times-Bold@0 SF
(Abstract)283.795 166.5 Q/F4 9/Times-Roman@0 SF .193(As an e)122.4 177.5 R .193
(xperiment in protocol optimizations, the authors undertook to impro)-.135 F
.464 -.135(ve t)-.135 H .194(he performance of a).135 F .027
(stateless protocol, the User Datagram Protocol \(UDP\) in the 4.3 BSD)122.4
188.5 R/F5 8/Times-Roman@0 SF(UNIX)2.277 E F4 2.277<876b>C 2.276(ernel. This)
405.597 188.5 R .026(paper de-)2.276 F .14(scribes the successful optimization\
s that were done along with measurements that sho)122.4 199.5 R -4.639 2.39
(wa U)-.225 H .141(DP per)454.197 199.5 R(-)-.18 E .746(formance impro)122.4
210.5 R -.135(ve)-.135 G .745
(ment of between 25% and 35% on CISC and RISC systems, and o).135 F -.135(ve)
-.135 G .745(rall k).135 F(ernel)-.09 E(impro)122.4 221.5 Q -.135(ve)-.135 G
(ment of between 12% and 18%.).135 E/F6 11/Times-Bold@0 SF 2.75(1. Intr)86.4
247.5 R(oduction)-.198 E/F7 11/Times-Roman@0 SF 1.109(Recent years ha)111.4
264.1 R 1.439 -.165(ve s)-.22 H 1.109(een an impressi).165 F 1.439 -.165(ve s)
-.275 H 1.109(eries of algorithms and implementation techniques).165 F 1.027
(that ha)86.4 277.1 R 1.357 -.165(ve s)-.22 H 1.027(harply impro).165 F -.165
(ve)-.165 G 3.778(ds).165 G(oftw)216.888 277.1 Q 1.028
(are performance of implementations of the T)-.11 F 1.028(ransmission Con-)
-.385 F .233(trol Protocol \(TCP\).)86.4 290.1 R(Ho)5.733 E(we)-.275 E -.165
(ve)-.275 G 1.113 -.44(r, w).165 H .233(hen we started the w).44 F .233
(ork described in this paper in 1991, none of)-.11 F(these algorithms and tech\
niques had been applied to User Datagram Protocol \(UDP\).)86.4 303.1 Q .015
(Applying the optimizations to UDP is interesting for tw)111.4 319.7 R 2.765
(or)-.11 G 2.765(easons. First,)368.395 319.7 R(unlik)2.765 E 2.765(eT)-.11 G
(CP)468.551 319.7 Q 2.765(,U)-1.221 G .015(DP is)494.24 319.7 R 3.722
(stateless. De\214ned)86.4 332.7 R .972
(in RFC-768 [1], UDP simply adds transport le)3.722 F -.165(ve)-.275 G 3.722
(la).165 G .972(ddressing and an optional)402.745 332.7 R .287
(checksum to the Internet Protocol \(IP\) service of best-ef)86.4 345.7 R .287
(fort datagram deli)-.275 F -.165(ve)-.275 G(ry).165 E 5.788(.S)-.715 G .288
(ome of w)447.686 345.7 R .288(ork on)-.11 F .987
(optimizing protocols has suggested that more stateful protocols can achie)86.4
358.7 R 1.316 -.165(ve b)-.275 H .986(etter performance.).165 F -.165(Fo)86.4
371.7 S 3.076(re).165 G .326(xample, Srini)109.309 371.7 R -.275(va)-.275 G
.327(san and Mogul sho).275 F .327(wed that by adding state to a Netw)-.275 F
.327(ork File System \(NFS\))-.11 F 1.075(implementation the)86.4 384.7 R 3.825
(yc)-.165 G 1.075(ould achie)186.769 384.7 R 1.405 -.165(ve a m)-.275 H 1.074
(odest performance impro).165 F -.165(ve)-.165 G 1.074(ment [2].).165 F
(Jacobson')6.574 E 3.824(sH)-.605 G(eader)494.585 384.7 Q .741(prediction algo\
rithm [3] uses information that TCP must store about the connection state to p\
re-)86.4 397.7 R .665(dict the ne)86.4 410.7 R .665(xt se)-.165 F .665
(gment that will arri)-.165 F .995 -.165(ve a)-.275 H .665
(nd optimize the processing of the e).165 F .665(xpected se)-.165 F 3.414
(gment. One)-.165 F 1.749
(interesting research question is whether the optimizations that w)86.4 423.7 R
1.75(ork for stateful protocols lik)-.11 F(e)-.11 E(TCP also w)86.4 436.7 Q
(ork for stateless protocols lik)-.11 E 2.75(eU)-.11 G(DP)280.803 436.7 Q(.)
-1.221 E .271(Second, UDP is v)111.4 453.3 R .271(ery hea)-.165 F .27
(vily used in the Internet protocol suite.)-.22 F .27
(Applications that use UDP)5.77 F .888
(include the Domain Name System \(DNS\) [4], the NFS [5], and the Netw)86.4
466.3 R .889(ork T)-.11 F .889(ime Protocol [6].)-.385 F(An)86.4 479.3 Q 3.492
(yi)-.165 G .742(nformation about ho)111.727 479.3 R 3.492(wt)-.275 G 3.492(oi)
217.254 479.3 S(mpro)229.304 479.3 Q 1.072 -.165(ve U)-.165 H .741
(DP performance is therefore lik).165 F .741(ely to pay in impro)-.11 F -.165
(ve)-.165 G(d).165 E(performance for se)86.4 492.3 Q -.165(ve)-.275 G
(ral important applications.).165 E 1.885 -.88(To e)111.4 508.9 T .125
(xperiment with UDP performance, we applied v).715 F .125
(arious optimizations to the implementa-)-.275 F .267
(tion of UDP in the 4.3BSD T)86.4 521.9 R .267
(ahoe release, as ported to the Mach 2.5 operating system running on)-.88 F
4.12(a3)86.4 534.9 S 1.37(86 processor)100.904 534.9 R 6.87(.W)-.605 G 4.12(et)
176.695 534.9 S 1.37
(hen applied these optimizations to the UDP implementation in SUN OS)188.757
534.9 R .941(release 4.1.1 running on a Sparc processor)86.4 547.9 R 6.441(.T)
-.605 G .941(hese tw)293.693 547.9 R 3.691(os)-.11 G .941(ystems allo)341.291
547.9 R .941(wed us to test the impact of)-.275 F
(the optimizations on both CISC \(386\) and RISC \(Sparc\) processors.)86.4
560.9 Q F6 2.75(2. An)86.4 586.9 R(Ov)2.75 E(er)-.11 E(view of TCP P)-.11 E
(erf)-.22 E(ormance Optimizations)-.275 E F7 1.325(The \214rst problem in appl\
ying the TCP performance optimizations to UDP is determining)111.4 603.5 R
2.359(which optimizations are TCP-speci\214c and which optimizations could fru\
itfully be applied to)86.4 616.5 R(UDP)86.4 629.5 Q 6.664(.T)-1.221 G 1.165
(his section brie\215y surv)123.314 629.5 R -.165(ey)-.165 G 3.915(st).165 G
1.165(he w)248.027 629.5 R 1.165
(ork on TCP performance optimization \(including w)-.11 F(ork)-.11 E 2.352
(done concurrently with the w)86.4 642.5 R 2.352
(ork described in this paper\) and discusses which optimizations)-.11 F
(appear applicable to UDP)86.4 655.5 Q(.)-1.221 E .36 LW 90.9 676 86.4 676 DL
95.4 676 90.9 676 DL 99.9 676 95.4 676 DL 104.4 676 99.9 676 DL 108.9 676 104.4
676 DL 113.4 676 108.9 676 DL 117.9 676 113.4 676 DL 122.4 676 117.9 676 DL
126.9 676 122.4 676 DL 131.4 676 126.9 676 DL 135.9 676 131.4 676 DL 140.4 676
135.9 676 DL 144.9 676 140.4 676 DL 149.4 676 144.9 676 DL 153.9 676 149.4 676
DL 158.4 676 153.9 676 DL F5 4(*T)96.4 698 S .167(he w)109.288 698 R .167
(ork described in this paper w)-.08 F .167(as done while Dr)-.08 F 2.167(.P)
-.44 G .167(artridge w)281.094 698 R .167(as on sabbatical from his re)-.08 F
.166(gular emplo)-.12 F(yer)-.08 E 2.166(,B)-.32 G .166(olt Be-)460.234 698 R
(ranek and Ne)86.4 709 Q .25(wman. \207)-.2 F/F8 7/Times-Roman@0 SF(UNIX)2 E F5
(is a trademark of Bell Laboratories.)2 E F7(From)181.796 769 Q/F9 11
/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G
(ns. on Networking).165 E F7(\(August 1993\))2.75 E EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-2-)295.987 49 Q 1.56(The cost of processing a TCP se)
111.4 85 R 1.56(gment has tw)-.165 F 4.311(op)-.11 G 1.561(arts: \(1\) a per)
339.336 85 R(-se)-.22 E 1.561(gment o)-.165 F -.165(ve)-.165 G 1.561
(rhead which).165 F .186(does not depend on the size of the data in the se)86.4
98 R .186(gment; and \(2\) costs incurred in handling the data)-.165 F
(in the se)86.4 111 Q(gment on transmission and reception.)-.165 E 1.173
(In 1989, Clark, Romk)111.4 127.6 R -.165(ey)-.11 G 3.923(,S)-.55 G(al)233.352
127.6 Q 1.173(wen and Jacobson e)-.11 F 1.173
(xamined a common TCP implementation)-.165 F .648(and found the per)86.4 140.6
R(-se)-.22 E .648(gment o)-.165 F -.165(ve)-.165 G .648(rhead w).165 F .648
(as about 200 instructions for both the sending and recei)-.11 F(v-)-.275 E
.567(ing TCP)86.4 153.6 R 3.317(,b)-1.221 G .567
(ut noted that Jacobson had an e)134.075 153.6 R .568
(xperimental implementation that reduced the recei)-.165 F(ving)-.275 E -.165
(ove)86.4 166.6 S .018(rhead [7].).165 F .017
(In subsequent lectures, Jacobson has e)5.517 F .017
(xplained the techniques he used to reduce the)-.165 F(per)86.4 179.6 Q(-se)
-.22 E 1.473(gment o)-.165 F -.165(ve)-.165 G 4.223(rhead. First,).165 F 1.474
(he observ)4.223 F 1.474(ed that, in most circumstances, TCP se)-.165 F 1.474
(gments arri)-.165 F 1.804 -.165(ve i)-.275 H(n).165 E 1.328
(order and do not require special handling \(e.g., the)86.4 192.6 R 4.078(yh)
-.165 G -2.475 -.22(av e)334.027 192.6 T 1.327(no out of band data\).)4.298 F
1.327(Based on this)6.827 F(observ)86.4 205.6 Q .464(ation, he de)-.275 F -.165
(ve)-.275 G .464(loped a technique kno).165 F .464
(wn as as header prediction, which, on TCP input, tests)-.275 F 1.139
(to see if the inbound se)86.4 218.6 R 1.138(gment is the e)-.165 F 1.138
(xpected se)-.165 F 1.138(gment and, if so, uses an optimized processing)-.165
F .414(path of less than a dozen lines of code [3].)86.4 231.6 R .414
(Jacobson also observ)5.914 F .414(ed that TCP traf)-.165 F .414(\214c e)-.275
F .414(xhibits con-)-.165 F 1.267(siderable locality)86.4 244.6 R 6.767(.T)
-.715 G 1.267(he ne)178.65 244.6 R 1.267(xt TCP se)-.165 F 1.267(gment recei)
-.165 F -.165(ve)-.275 G 4.017(di).165 G 4.017(sh)324.443 244.6 S 1.267
(ighly lik)338.239 244.6 R 1.267(ely to be destined for the same)-.11 F .682
(application as the last se)86.4 257.6 R 3.432(gment. Caching)-.165 F .683
(information about the last application \(in the form of a)3.432 F .769
(protocol control block or PCB\) that recei)86.4 270.6 R -.165(ve)-.275 G 3.519
(das).165 G -.165(eg)302.918 270.6 S .769(ment often mak).165 F .769
(es it possible to skip doing an)-.11 F -.165(ex)86.4 283.6 S(pensi).165 E .346
-.165(ve s)-.275 H .016(earch or PCB lookup to \214nd out who is to recei).165
F .346 -.165(ve t)-.275 H .016(he se).165 F 2.766(gment. A)-.165 F .016
(subsequent study by)2.766 F 2.135
(Mogul con\214rmed that there is substantial locality in TCP and UDP traf)86.4
296.6 R 2.134(\214c [8].)-.275 F(Furthermore,)7.634 E(McK)86.4 309.6 Q(enne)
-.275 E 2.75(ya)-.165 G(nd Do)142.467 309.6 Q .33 -.165(ve h)-.165 H -2.475
-.22(av e).165 H(done an e)2.97 E(xtensi)-.165 E .33 -.165(ve s)-.275 H
(tudy of algorithms for PCB lookups [9].).165 E .033(The reductions in TCP o)
111.4 326.2 R -.165(ve)-.165 G .033(rhead ha).165 F .363 -.165(ve m)-.22 H .033
(ade data handling the major cost in TCP processing,).165 F .052
(particularly for lar)86.4 339.2 R .052(ger pack)-.198 F 2.802(ets. \(See,)-.11
F .052(for e)2.802 F .051(xample, the data in [10]\).)-.165 F .051
(At minimum, the data in each)5.551 F 1.833(TCP se)86.4 352.2 R 1.833
(gment must be copied between application b)-.165 F(uf)-.22 E 1.834
(fers and the netw)-.275 F 1.834(ork interf)-.11 F 1.834(ace \(or vice-)-.11 F
-.165(ve)86.4 365.2 S .861(rsa\) and must be checksummed.).165 F(Ho)6.361 E(we)
-.275 E -.165(ve)-.275 G 1.741 -.44(r, m).165 H .86(ost implementations do se)
.44 F -.165(ve)-.275 G .86(ral copies.).165 F .86(In 1990,)6.36 F .024(Clark c\
hallenged protocol implementers to reduce the data copies in their code [11], \
and Jacobson)86.4 378.2 R .361(suggested that b)86.4 391.2 R .361
(uilding memory-mapped netw)-.22 F .361(ork interf)-.11 F .361(aces w)-.11 F
.361(ould mak)-.11 F 3.111(ei)-.11 G 3.111(tp)415.526 391.2 S .361
(ossible to reduce the)427.195 391.2 R .313
(number of data copies to a single cop)86.4 404.2 R 3.064(y[)-.11 G 3.064
(12]. Jacobson)264.764 404.2 R .314(further suggested that on RISC processors)
3.064 F 1.264(it might be possible to ef)86.4 417.2 R(fecti)-.275 E -.165(ve)
-.275 G 1.264(ly eliminate the cost of doing the TCP checksum by \214tting the)
.165 F 1.304(checksum into the code that copied data between application b)86.4
430.2 R(uf)-.22 E 1.305(fers and the netw)-.275 F 1.305(ork interf)-.11 F(ace)
-.11 E -.22(bu)86.4 443.2 S -.275(ff).22 G 3.028(ers. V).275 F .278
(ery recently)-1.221 F 3.028(,w)-.715 G .278(ork by a team at He)197.707 443.2
R(wlett-P)-.275 E(ackard')-.165 E 3.027(sB)-.605 G .277
(ristol Laboratory has demonstrated)363.899 443.2 R(that an interf)86.4 456.2 Q
(ace based on Jacobson')-.11 E 2.75(si)-.605 G(deas can achie)254.92 456.2 Q
.33 -.165(ve ex)-.275 H(traordinary TCP performance [13,14].).165 E 1.022
(Examining these TCP optimizations from the perspecti)111.4 472.8 R 1.352 -.165
(ve o)-.275 H 3.772(ft).165 G 1.022(rying to apply them to UDP)389.23 472.8 R
(,)-1.221 E
(we concluded that some optimizations were clearly more promising than others.)
86.4 485.8 Q .36(Header prediction, which tries to predict the ne)111.4 502.4 R
.36(xt se)-.165 F .36(gment, w)-.165 F .36(as clearly not rele)-.11 F -.275(va)
-.275 G .359(nt to UDP).275 F(.)-1.221 E .022
(Each UDP datagram stands alone, independent of the ones before or after it.)
86.4 515.4 R .022(But the general prin-)5.522 F .649
(ciple of locality seemed lik)86.4 528.4 R .649(ely to ha)-.11 F .979 -.165
(ve s)-.22 H .649(ome rele).165 F -.275(va)-.275 G 3.399(nce. Indeed,).275 F
(Mogul')3.399 E 3.399(sw)-.605 G .648(ork sho)421.713 528.4 R .648
(wed that UDP)-.275 F .921(demonstrated locality similar to that of TCP)86.4
541.4 R 6.421(.I)-1.221 G 3.671(nt)297.26 541.4 S .921
(he optimizations described belo)309.489 541.4 R 2.352 -.715(w, w)-.275 H 3.672
(es).715 G(uccess-)486.027 541.4 Q(fully made use of locality to impro)86.4
554.4 Q .33 -.165(ve U)-.165 H(DP performance.).165 E(Re)111.4 571 Q -.055(ga)
-.165 G .171(rding data related costs, the cost of a data cop).055 F 2.921(yw)
-.11 G .171(ould appear to be lar)351.865 571 R .17(gely independent)-.198 F
1.496(of the protocol used to encapsulate the data.)86.4 584 R 1.496
(So reducing data copies appeared lik)6.996 F 1.496(ely to yield)-.11 F .685
(UDP impro)86.4 597 R -.165(ve)-.165 G .684
(ments similar to those reported for TCP).165 F 6.184(.R)-1.221 G .684
(olling the checksum into the cop)342.091 597 R 3.434(yc)-.11 G(ode)502.516 597
Q -.11(wa)86.4 610 S 4.822(sap).11 G 2.072(roblematic performance impro)123.423
610 R -.165(ve)-.165 G 2.072(ment, since UDP permits applications to turn of)
.165 F 4.823(ft)-.275 G(he)508.016 610 Q .404(checksum if the)86.4 623 R 3.154
(yw)-.165 G 3.154(ish. In)173.291 623 R .404(our w)3.154 F .404(ork, we e)-.11
F .404(xperimented with rolling the checksum and cop)-.165 F 3.153(yl)-.11 G
(oops)497.621 623 Q(together)86.4 636 Q 5.5(.A)-.605 G 2.75(tt)138.034 636 S(h\
e end of this paper some of the issues related to the checksum are discussed.)
146.9 636 Q/F1 11/Times-Bold@0 SF 2.75(3. A)86.4 662 R(Sk)2.75 E
(etch of the 4.3 T)-.11 E(ahoe UDP Code)-1.012 E F0 1.894 -.88(We s)111.4 678.6
T .134(tarted by optimizing the 4.3 BSD T).88 F .134
(ahoe release code, as ported to the Mach 2.5 operat-)-.88 F 2.934(ing system.)
86.4 691.6 R 4.694 -.88(We l)8.434 H 2.933
(ater applied the optimizations to SUN OS release 4.1.1.).88 F 2.933(The dif)
8.433 F(ferences)-.275 E .356(between the original T)86.4 704.6 R .356
(ahoe release and the Mach release are suf)-.88 F .356
(\214ciently minor that the)-.275 F 3.107(yn)-.165 G .357(eed not)485.967 704.6
R 2.339(be discussed.)86.4 717.6 R 2.338(What follo)7.838 F 2.338(ws is a sk)
-.275 F 2.338(etch of the T)-.11 F 2.338(ahoe UDP code.)-.88 F 2.338
(The important dif)7.838 F(ferences)-.275 E .783(between the T)86.4 730.6 R
.784(ahoe code and SUN code are described at the end of this section.)-.88 F
.784(Descriptions of)6.284 F(From)181.796 769 Q/F2 11/Times-Italic@0 SF(IEEE/A)
2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0
(\(August 1993\))2.75 E EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-3-)295.987 49 Q .121(special features of the BSD code\
, which were not essential to the optimization, ha)86.4 85 R .45 -.165(ve b)
-.22 H .12(een left out.).165 F(See [15] for a more detailed discussion.)86.4
98 Q 253.9 409.5 MT 0 -216 RL -72 0 RL 0 216 RL CL .44 LW ST 253.9 236.7 MT 0
-43.2 RL -72 0 RL 0 43.2 RL CL ST/F1 11/Helvetica@0 SF(sendit)203.226 217.52 Q
253.9 279.9 MT 0 -43.2 RL -72 0 RL 0 43.2 RL CL ST(sosend)200.168 260.72 Q
253.9 323.1 MT 0 -43.2 RL -72 0 RL 0 43.2 RL CL ST(udp_usrreq)190.081 303.92 Q
253.9 366.3 MT 0 -43.2 RL -72 0 RL 0 43.2 RL CL ST(udp_output)190.378 347.12 Q
253.9 409.5 MT 0 -43.2 RL -72 0 RL 0 43.2 RL CL ST(ip_output)195.273 390.32 Q
433.9 409.5 MT 0 -216 RL -72 0 RL 0 216 RL CL ST 433.9 409.5 MT 0 -43.2 RL -72
0 RL 0 43.2 RL CL ST(ipintr)385.982 390.32 Q 433.9 366.3 MT 0 -43.2 RL -72 0 RL
0 43.2 RL CL ST(udp_input)373.744 347.12 Q 433.9 323.1 MT 0 -43.2 RL -72 0 RL 0
43.2 RL CL ST(sbappendaddr)362.739 303.92 Q 433.9 279.9 MT 0 -43.2 RL -72 0 RL
0 43.2 RL CL ST(soreceiv)374.503 260.72 Q(e)-.275 E 433.9 236.7 MT 0 -43.2 RL
-72 0 RL 0 43.2 RL CL ST(recvit)384.761 217.52 Q 1 LW 217.9 243.9 217.9 222.3
DL 217.9 243.9 MT -1.8 -7.2 RL 3.6 0 RL CL BL 217.9 243.9 MT -1.8 -7.2 RL 3.6 0
RL CL ST 217.9 287.1 217.9 265.5 DL 217.9 287.1 MT -1.8 -7.2 RL 3.6 0 RL CL BL
217.9 287.1 MT -1.8 -7.2 RL 3.6 0 RL CL ST 217.9 330.3 217.9 308.7 DL 217.9
330.3 MT -1.8 -7.2 RL 3.6 0 RL CL BL 217.9 330.3 MT -1.8 -7.2 RL 3.6 0 RL CL ST
217.9 373.5 217.9 351.9 DL 217.9 373.5 MT -1.8 -7.2 RL 3.6 0 RL CL BL 217.9
373.5 MT -1.8 -7.2 RL 3.6 0 RL CL ST 217.9 416.7 217.9 395.1 DL 217.9 416.7 MT
-1.8 -7.2 RL 3.6 0 RL CL BL 217.9 416.7 MT -1.8 -7.2 RL 3.6 0 RL CL ST 397.9
402.3 397.9 423.9 DL 397.9 402.3 MT 1.8 7.2 RL -3.6 0 RL CL BL 397.9 402.3 MT
1.8 7.2 RL -3.6 0 RL CL ST 397.9 359.1 397.9 380.7 DL 397.9 359.1 MT 1.8 7.2 RL
-3.6 0 RL CL BL 397.9 359.1 MT 1.8 7.2 RL -3.6 0 RL CL ST 397.9 315.9 397.9
337.5 DL 397.9 315.9 MT 1.8 7.2 RL -3.6 0 RL CL BL 397.9 315.9 MT 1.8 7.2 RL
-3.6 0 RL CL ST 397.9 287.1 397.9 265.5 DL 397.9 287.1 MT -1.8 -7.2 RL 3.6 0 RL
CL BL 397.9 287.1 MT -1.8 -7.2 RL 3.6 0 RL CL ST 397.9 243.9 397.9 222.3 DL
397.9 243.9 MT -1.8 -7.2 RL 3.6 0 RL CL BL 397.9 243.9 MT -1.8 -7.2 RL 3.6 0 RL
CL ST(sendto)201.389 122.42 Q(send)205.976 135.42 Q(sendmsg)195.587 148.42 Q
-2.893(wr ite)206.207 161.42 R 217.9 193.5 217.9 175.5 DL 217.9 193.5 MT -1.8
-7.2 RL 3.6 0 RL CL BL 217.9 193.5 MT -1.8 -7.2 RL 3.6 0 RL CL ST(recvfrom)
376.511 122.42 Q(recv)387.511 135.42 Q(recvmsg)377.121 148.42 Q(read)386.895
161.42 Q 397.9 193.5 397.9 175.5 DL 397.9 193.5 MT -1.8 -7.2 RL 3.6 0 RL CL BL
397.9 193.5 MT -1.8 -7.2 RL 3.6 0 RL CL ST .44 LW 91.9 439.65 86.4 439.65 DL
92.4 439.65 86.9 439.65 DL 97.9 439.65 92.4 439.65 DL 103.4 439.65 97.9 439.65
DL 108.9 439.65 103.4 439.65 DL 114.4 439.65 108.9 439.65 DL 119.9 439.65 114.4
439.65 DL 125.4 439.65 119.9 439.65 DL 130.9 439.65 125.4 439.65 DL 136.4
439.65 130.9 439.65 DL 141.9 439.65 136.4 439.65 DL 147.4 439.65 141.9 439.65
DL 152.9 439.65 147.4 439.65 DL 158.4 439.65 152.9 439.65 DL 163.9 439.65 158.4
439.65 DL 169.4 439.65 163.9 439.65 DL 174.9 439.65 169.4 439.65 DL 180.4
439.65 174.9 439.65 DL 185.9 439.65 180.4 439.65 DL 191.4 439.65 185.9 439.65
DL 196.9 439.65 191.4 439.65 DL 202.4 439.65 196.9 439.65 DL 207.9 439.65 202.4
439.65 DL 213.4 439.65 207.9 439.65 DL 218.9 439.65 213.4 439.65 DL 224.4
439.65 218.9 439.65 DL 229.9 439.65 224.4 439.65 DL 235.4 439.65 229.9 439.65
DL 240.9 439.65 235.4 439.65 DL 246.4 439.65 240.9 439.65 DL 251.9 439.65 246.4
439.65 DL 257.4 439.65 251.9 439.65 DL 262.9 439.65 257.4 439.65 DL 268.4
439.65 262.9 439.65 DL 273.9 439.65 268.4 439.65 DL 279.4 439.65 273.9 439.65
DL 284.9 439.65 279.4 439.65 DL 290.4 439.65 284.9 439.65 DL 295.9 439.65 290.4
439.65 DL 301.4 439.65 295.9 439.65 DL 306.9 439.65 301.4 439.65 DL 312.4
439.65 306.9 439.65 DL 317.9 439.65 312.4 439.65 DL 323.4 439.65 317.9 439.65
DL 328.9 439.65 323.4 439.65 DL 334.4 439.65 328.9 439.65 DL 339.9 439.65 334.4
439.65 DL 345.4 439.65 339.9 439.65 DL 350.9 439.65 345.4 439.65 DL 356.4
439.65 350.9 439.65 DL 361.9 439.65 356.4 439.65 DL 367.4 439.65 361.9 439.65
DL 372.9 439.65 367.4 439.65 DL 378.4 439.65 372.9 439.65 DL 383.9 439.65 378.4
439.65 DL 389.4 439.65 383.9 439.65 DL 394.9 439.65 389.4 439.65 DL 400.4
439.65 394.9 439.65 DL 405.9 439.65 400.4 439.65 DL 411.4 439.65 405.9 439.65
DL 416.9 439.65 411.4 439.65 DL 422.4 439.65 416.9 439.65 DL 427.9 439.65 422.4
439.65 DL 433.4 439.65 427.9 439.65 DL 438.9 439.65 433.4 439.65 DL 444.4
439.65 438.9 439.65 DL 449.9 439.65 444.4 439.65 DL 455.4 439.65 449.9 439.65
DL 460.9 439.65 455.4 439.65 DL 466.4 439.65 460.9 439.65 DL 471.9 439.65 466.4
439.65 DL 477.4 439.65 471.9 439.65 DL 482.9 439.65 477.4 439.65 DL 488.4
439.65 482.9 439.65 DL 493.9 439.65 488.4 439.65 DL 499.4 439.65 493.9 439.65
DL 504.9 439.65 499.4 439.65 DL 510.4 439.65 504.9 439.65 DL 515.9 439.65 510.4
439.65 DL 521.4 439.65 515.9 439.65 DL 526.9 439.65 521.4 439.65 DL 532.4
439.65 526.9 439.65 DL 537.9 439.65 532.4 439.65 DL 543.4 439.65 537.9 439.65
DL 548.9 439.65 543.4 439.65 DL 554.4 439.65 548.9 439.65 DL 554.4 428.65 554.4
439.65 DL 554.4 417.65 554.4 428.65 DL 554.4 406.65 554.4 417.65 DL 554.4
395.65 554.4 406.65 DL 554.4 384.65 554.4 395.65 DL 554.4 373.65 554.4 384.65
DL 554.4 362.65 554.4 373.65 DL 554.4 351.65 554.4 362.65 DL 554.4 340.65 554.4
351.65 DL 554.4 329.65 554.4 340.65 DL 554.4 318.65 554.4 329.65 DL 554.4
307.65 554.4 318.65 DL 554.4 296.65 554.4 307.65 DL 554.4 285.65 554.4 296.65
DL 554.4 274.65 554.4 285.65 DL 554.4 263.65 554.4 274.65 DL 554.4 252.65 554.4
263.65 DL 554.4 241.65 554.4 252.65 DL 554.4 230.65 554.4 241.65 DL 554.4
219.65 554.4 230.65 DL 554.4 208.65 554.4 219.65 DL 554.4 197.65 554.4 208.65
DL 554.4 186.65 554.4 197.65 DL 554.4 175.65 554.4 186.65 DL 554.4 164.65 554.4
175.65 DL 554.4 153.65 554.4 164.65 DL 554.4 142.65 554.4 153.65 DL 554.4
131.65 554.4 142.65 DL 554.4 120.65 554.4 131.65 DL 554.4 109.65 554.4 120.65
DL 554.4 107.25 554.4 118.25 DL 91.9 107.25 86.4 107.25 DL 92.4 107.25 86.9
107.25 DL 97.9 107.25 92.4 107.25 DL 103.4 107.25 97.9 107.25 DL 108.9 107.25
103.4 107.25 DL 114.4 107.25 108.9 107.25 DL 119.9 107.25 114.4 107.25 DL 125.4
107.25 119.9 107.25 DL 130.9 107.25 125.4 107.25 DL 136.4 107.25 130.9 107.25
DL 141.9 107.25 136.4 107.25 DL 147.4 107.25 141.9 107.25 DL 152.9 107.25 147.4
107.25 DL 158.4 107.25 152.9 107.25 DL 163.9 107.25 158.4 107.25 DL 169.4
107.25 163.9 107.25 DL 174.9 107.25 169.4 107.25 DL 180.4 107.25 174.9 107.25
DL 185.9 107.25 180.4 107.25 DL 191.4 107.25 185.9 107.25 DL 196.9 107.25 191.4
107.25 DL 202.4 107.25 196.9 107.25 DL 207.9 107.25 202.4 107.25 DL 213.4
107.25 207.9 107.25 DL 218.9 107.25 213.4 107.25 DL 224.4 107.25 218.9 107.25
DL 229.9 107.25 224.4 107.25 DL 235.4 107.25 229.9 107.25 DL 240.9 107.25 235.4
107.25 DL 246.4 107.25 240.9 107.25 DL 251.9 107.25 246.4 107.25 DL 257.4
107.25 251.9 107.25 DL 262.9 107.25 257.4 107.25 DL 268.4 107.25 262.9 107.25
DL 273.9 107.25 268.4 107.25 DL 279.4 107.25 273.9 107.25 DL 284.9 107.25 279.4
107.25 DL 290.4 107.25 284.9 107.25 DL 295.9 107.25 290.4 107.25 DL 301.4
107.25 295.9 107.25 DL 306.9 107.25 301.4 107.25 DL 312.4 107.25 306.9 107.25
DL 317.9 107.25 312.4 107.25 DL 323.4 107.25 317.9 107.25 DL 328.9 107.25 323.4
107.25 DL 334.4 107.25 328.9 107.25 DL 339.9 107.25 334.4 107.25 DL 345.4
107.25 339.9 107.25 DL 350.9 107.25 345.4 107.25 DL 356.4 107.25 350.9 107.25
DL 361.9 107.25 356.4 107.25 DL 367.4 107.25 361.9 107.25 DL 372.9 107.25 367.4
107.25 DL 378.4 107.25 372.9 107.25 DL 383.9 107.25 378.4 107.25 DL 389.4
107.25 383.9 107.25 DL 394.9 107.25 389.4 107.25 DL 400.4 107.25 394.9 107.25
DL 405.9 107.25 400.4 107.25 DL 411.4 107.25 405.9 107.25 DL 416.9 107.25 411.4
107.25 DL 422.4 107.25 416.9 107.25 DL 427.9 107.25 422.4 107.25 DL 433.4
107.25 427.9 107.25 DL 438.9 107.25 433.4 107.25 DL 444.4 107.25 438.9 107.25
DL 449.9 107.25 444.4 107.25 DL 455.4 107.25 449.9 107.25 DL 460.9 107.25 455.4
107.25 DL 466.4 107.25 460.9 107.25 DL 471.9 107.25 466.4 107.25 DL 477.4
107.25 471.9 107.25 DL 482.9 107.25 477.4 107.25 DL 488.4 107.25 482.9 107.25
DL 493.9 107.25 488.4 107.25 DL 499.4 107.25 493.9 107.25 DL 504.9 107.25 499.4
107.25 DL 510.4 107.25 504.9 107.25 DL 515.9 107.25 510.4 107.25 DL 521.4
107.25 515.9 107.25 DL 526.9 107.25 521.4 107.25 DL 532.4 107.25 526.9 107.25
DL 537.9 107.25 532.4 107.25 DL 543.4 107.25 537.9 107.25 DL 548.9 107.25 543.4
107.25 DL 554.4 107.25 548.9 107.25 DL 86.4 107.25 86.4 118.25 DL 86.4 109.65
86.4 120.65 DL 86.4 120.65 86.4 131.65 DL 86.4 131.65 86.4 142.65 DL 86.4
142.65 86.4 153.65 DL 86.4 153.65 86.4 164.65 DL 86.4 164.65 86.4 175.65 DL
86.4 175.65 86.4 186.65 DL 86.4 186.65 86.4 197.65 DL 86.4 197.65 86.4 208.65
DL 86.4 208.65 86.4 219.65 DL 86.4 219.65 86.4 230.65 DL 86.4 230.65 86.4
241.65 DL 86.4 241.65 86.4 252.65 DL 86.4 252.65 86.4 263.65 DL 86.4 263.65
86.4 274.65 DL 86.4 274.65 86.4 285.65 DL 86.4 285.65 86.4 296.65 DL 86.4
296.65 86.4 307.65 DL 86.4 307.65 86.4 318.65 DL 86.4 318.65 86.4 329.65 DL
86.4 329.65 86.4 340.65 DL 86.4 340.65 86.4 351.65 DL 86.4 351.65 86.4 362.65
DL 86.4 362.65 86.4 373.65 DL 86.4 373.65 86.4 384.65 DL 86.4 384.65 86.4
395.65 DL 86.4 395.65 86.4 406.65 DL 86.4 406.65 86.4 417.65 DL 86.4 417.65
86.4 428.65 DL 86.4 428.65 86.4 439.65 DL/F2 11/Times-Bold@0 SF 2.75
(3.1. Sending)86.4 469.4 R(Code)2.75 E F0(An application that wishes to send a\
 UDP datagram can use of one of four system calls:)111.4 486 Q<83>111.4 502.6 Q
F1(sendto\(s)136.4 502.6 Q(,msg,msglen,\215ags)-.165 E(,to)-.165 E(,tolen\))
-.44 E F0(.)A F1(Sendto)7.46 E F0 1.96(sends the gi)4.71 F -.165(ve)-.275 G
4.71(nm).165 G 1.96(essage \()443.607 502.6 R F1(msg)A F0 4.71(\)t)C(o)512.9
502.6 Q(the speci\214ed destination address \()136.4 515.6 Q F1(to)A F0 2.75
(\)o)C 2.75(nap)305.965 515.6 S(re-allocated UDP sock)327.349 515.6 Q(et \()
-.11 E F1(s)A F0(\).)A<83>111.4 532.2 Q F1(send\(s)136.4 532.2 Q
(,msg,msglen,\215ags\))-.165 E F0 8.239(.I)C 5.489(nt)276.199 532.2 S 2.738
(he BSD system, it is possible to \214x the remote)290.246 532.2 R .431
(address to which all UDP datagrams will be sent, using the)136.4 545.2 R F1
(connect)3.181 E F0 .431(system call.)3.181 F -.165(Fo)5.931 G(r).165 E 1.831
(UDP sock)136.4 558.2 R 1.831(ets which ha)-.11 F 2.16 -.165(ve b)-.22 H 1.83
(een connected, the).165 F F1(send)4.58 E F0 1.83(call is simply a v)4.58 F
1.83(ariant of the)-.275 F F1(sendto)136.4 571.2 Q F0
(call, without the destination parameters.)2.75 E<83>111.4 587.8 Q F1
(sendmsg\(s)136.4 587.8 Q -2.893(,msg_str uct,\215ags\))-.165 F F0(.)A F1
(Sendmsg)8.323 E F0 2.823(is another v)5.573 F 2.823(ariant of the)-.275 F F1
(sendto)5.574 E F0(call,)5.574 E .787(which pro)136.4 600.8 R .787
(vides a scatter)-.165 F(-g)-.22 E .787(ather IO interf)-.055 F 3.537(ace. The)
-.11 F F1 -2.893(msg_str uct)3.537 F F0 .786(parameter contains an)3.537 F .243
(array specifying where the v)136.4 613.8 R .243
(arious pieces of the message lie in the application')-.275 F 2.994(sm)-.605 G
(em-)501.295 613.8 Q(ory)136.4 626.8 Q 8.795(.T)-.715 G 3.295(he k)168.614
626.8 R 3.295(ernel g)-.11 F 3.295(athers the v)-.055 F 3.294
(arious pieces into a single message and sends it.)-.275 F F1(Sendmsg)136.4
639.8 Q F0 .659(can be used with either connected or unconnected sock)3.409 F
3.41(ets. When)-.11 F(sending)3.41 E -.165(ove)136.4 652.8 S 7.69(ra).165 G
7.69(nu)168.191 652.8 S 4.94(nconnected sock)186.881 652.8 R 4.939
(et, the destination address also must be placed in)-.11 F F1 -2.893
(msg_str uct)136.4 665.8 R F0(.)A<83>111.4 682.4 Q F1 -2.893(wr ite\(s)136.4
682.4 R(,msg,msglen\))-.165 E F0(.)A F1 -2.893(Wr ite)6.069 F F0 .57
(is the standard UNIX\256 system call for writing to a \214le)3.319 F(or sock)
136.4 695.4 Q(et and, for sock)-.11 E(ets, beha)-.11 E -.165(ve)-.22 G 2.75(sj)
.165 G(ust lik)294.646 695.4 Q(e)-.11 E F1(send)2.75 E F0(.)A .632
(Once in the k)86.4 712 R .631(ernel, all four system calls package their ar)
-.11 F .631(guments into a standard form and call a)-.198 F 1.73
(common sending routine,)86.4 725 R F1(sendit)4.48 E F0(.)A F1(Sendit)7.23 E F0
1.73(con\214rms that the ar)4.48 F 1.731(guments are v)-.198 F 1.731
(alid \(for e)-.275 F(xample,)-.165 E(From)181.796 769 Q/F3 11/Times-Italic@0
SF(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0
(\(August 1993\))2.75 E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-4-)295.987 49 Q 1.137
(con\214rming that the memory addresses to cop)86.4 85 R 3.887(ya)-.11 G 1.137
(re within the application')305.361 85 R 3.887(sm)-.605 G 1.137
(emory space\), and)435.793 85 R(then calls)86.4 98 Q/F1 11/Helvetica@0 SF
(sosend)2.75 E F0(.)A F1(Sosend)111.4 114.6 Q F0 .666
(is the start of real protocol processing.)3.415 F F1(Sosend)6.166 E F0 .666
(copies the user data into a b)3.416 F(uf)-.22 E(fer)-.275 E 1.352(chain in k)
86.4 127.6 R 1.352(ernel memory and passes the data do)-.11 F 1.351
(wn to the appropriate transport protocol.)-.275 F 1.351(If the)6.851 F .818
(transport protocol is not ready to accept the data due to \215o)86.4 140.6 R
3.568(wc)-.275 G(ontrol,)367.839 140.6 Q F1(sosend)3.569 E F0 .819(suspends, w)
3.569 F(aiting)-.11 E .682(for space to become a)86.4 153.6 R -.275(va)-.22 G
3.432(ilable. Note).275 F .682(that for a protocol lik)3.432 F 3.432(eU)-.11 G
(DP)365.481 153.6 Q 3.432(,w)-1.221 G .682(hich has no \215o)392.442 153.6 R
3.431(wc)-.275 G .681(ontrol, all)474.94 153.6 R F1(sosend)86.4 166.6 Q F0
(does is cop)2.75 E 2.75(yt)-.11 G(he user data into the k)184.696 166.6 Q
(ernel and call the transport protocol.)-.11 E F1(Sosend)111.4 183.2 Q F0 .715
(calls the transport protocol using a protocol switch table.)3.465 F .715
(Each transport protocol)6.215 F .35(has a protocol switch entry which include\
s basic information about the protocol \(such as whether)86.4 196.2 R 3.572(ac)
86.4 209.2 S .822(onnection must be established before sending\), and de\214ni\
tions for nine protocol entry points.)99.74 209.2 R(All communication with the\
 transport protocol is made by calling one of the nine entry points.)86.4 222.2
Q F1(Sosend)111.4 238.8 Q F0(al)3.66 E -.11(wa)-.11 G .91(ys calls the).11 F F1
(usrreq)3.66 E F0 .909
(entry point, the entry point that handles most application)3.66 F .809
(system calls \(`)86.4 251.8 R .809(`user requests')-.814 F .81
('\), with the instruction to send a certain amount of data \(the data is)-.814
F 1.306(passed as an ar)86.4 264.8 R 4.056(gument\). Internally)-.198 F 4.056
(,a)-.715 G(protocol')-.001 E(s)-.605 E F1(usrreq)4.055 E F0 1.305
(routine typically does some v)4.055 F 1.305(ery basic)-.165 F .428(parameter \
checking and then calls an appropriate subroutine to handle the system call.)
86.4 277.8 R -.165(Fo)5.928 G 3.178(rU).165 G(DP)502.813 277.8 Q(,)-1.221 E
(the routine to handle sending UDP)86.4 290.8 Q(datagrams is)5.5 E F1
(udp_output)2.75 E F0(.)A F1(Udp_output)111.4 307.4 Q F0 1.046
(is passed a sock)3.796 F 1.046
(et-speci\214c protocol control block \(PCB\), a b)-.11 F(uf)-.22 E 1.046
(fer chain con-)-.275 F .896
(taining the data to be sent, and the destination address.)86.4 320.4 R .896
(The protocol control block contains the)6.396 F .735
(UDP-speci\214c information for the sock)86.4 333.4 R .734
(et on which the data is being sent.)-.11 F F1(Udp_output)6.234 E F0(prepends)
3.484 E .891(the UDP header and a template of the IP header)86.4 346.4 R 3.641
(,p)-.44 G .891(erforms the UDP checksum, and calls IP)315.725 346.4 R 3.641
(,v)-1.221 G(ia)510.458 346.4 Q F1(ip_output)86.4 359.4 Q F0
(to send the datagram.)2.75 E F1(Ip_output)111.4 376 Q F0 .742
(\214lls in the IP header left un\214lled by)3.492 F F1(udp_output)3.492 E F0
3.492(,l)C .742(ooks up a route for the data-)389.926 376 R 1.128
(gram, fragments the IP datagram if it is too lar)86.4 389 R 1.128
(ge for the outbound interf)-.198 F 1.128(ace, checksums the IP)-.11 F(header)
86.4 402 Q 2.75(,a)-.44 G(nd calls the appropriate interf)125.659 402 Q(ace de)
-.11 E(vice dri)-.275 E -.165(ve)-.275 G 2.75(rt).165 G 2.75(os)335.297 402 S
(end the IP datagram.)347.826 402 Q/F2 11/Times-Bold@0 SF 2.75(3.2. Recei)86.4
428 R(ving Code)-.11 E F0(The recei)111.4 444.6 Q(ving code has a some)-.275 E
(what simpler structure than the sending code.)-.275 E 1.548(Upon recei)111.4
461.2 R 1.548(ving an IP datagram, a netw)-.275 F 1.548(ork interf)-.11 F 1.548
(ace places the datagram on the IP input)-.11 F 2.234(queue and sets a softw)
86.4 474.2 R 2.234(are interrupt for the IP input routine,)-.11 F F1(ipintr)
4.985 E F0 7.735(.W)C 2.235(hen interrupted,)417.691 474.2 R F1(ipintr)4.985 E
F0(remo)86.4 487.2 Q -.165(ve)-.165 G 3.458(sd).165 G .708
(atagrams from the input queue, checks the IP header and datagram length for v)
132.296 487.2 R(alidity)-.275 E(,)-.715 E .594
(and, if the datagram is destined for one of the host')86.4 500.2 R 3.344(sa)
-.605 G .594(ddresses, does IP reassembly \(if required\),)328.782 500.2 R .819
(and passes the IP datagram up to the transport protocol, using the)86.4 513.2
R F1(pr_input)3.569 E F0 .819(routine in the trans-)3.569 F(port protocol')86.4
526.2 Q 2.75(sp)-.605 G(rotocol switch entry)159.121 526.2 Q(.)-.715 E(UDP')
111.4 542.8 Q 3.098(si)-.605 G .348(nput routine is)146.893 542.8 R F1
(udp_input)3.099 E F0(.)A F1(Udp_input)5.849 E F0 .349
(checks the UDP header for errors and if the)3.099 F 1.039(datagram is v)86.4
555.8 R 1.039(alid, uses the UDP header and the IP header information to locat\
e the appropriate)-.275 F(sock)86.4 568.8 Q .439(et to recei)-.11 F .769 -.165
(ve t)-.275 H .44(he UDP data.).165 F .44(If a sock)5.94 F .44(et e)-.11 F .44
(xists to recei)-.165 F .77 -.165(ve t)-.275 H .44(he data,).165 F F1
(udp_input)3.19 E F0(calls)3.19 E F1(sbappen-)3.19 E(daddr)86.4 581.8 Q F0
(\(sock)4.237 E 1.487(et b)-.11 F(uf)-.22 E 1.487
(fer append, with address\) to append the data in the UDP datagram, plus the)
-.275 F
(source address of the application that sent the datagram, onto the sock)86.4
594.8 Q(et')-.11 E 2.75(sr)-.605 G(ead b)415.927 594.8 Q(uf)-.22 E(fer)-.275 E
(.)-.605 E(Applications read from a sock)111.4 611.4 Q(et')-.11 E 2.75(sr)-.605
G(ead b)265.565 611.4 Q(uf)-.22 E(fer using one of four system calls:)-.275 E
<83>111.4 628 Q F1(recvfrom)136.4 628 Q F0(\(s,b)A(uf,b)-.22 E
(u\215en,\215ags,from,fromlen\).)-.22 E F1(Recvfrom)8.177 E F0 2.677
(reads from the gi)5.427 F -.165(ve)-.275 G 5.428(ns).165 G(ock)494.684 628 Q
(et)-.11 E 1.027(into the b)136.4 641 R(uf)-.22 E 1.026(fer \()-.275 F F1 -.22
(bu)C(f).22 E F0 3.776(\)u)C 1.026(ntil either the b)236.338 641 R(uf)-.22 E
1.026(fer has been \214lled, or an entire datagram has)-.275 F .385(been read.)
136.4 654 R .386(If a partial datagram is read, the k)5.886 F .386
(ernel discards the remainder of the data-)-.11 F 2.75(gram. The)136.4 667 R
(address of the sending application is placed in the)2.75 E F1(from)2.75 E F0
(structure.)2.75 E<83>111.4 683.6 Q F1(recv)136.4 683.6 Q F0(\(s,b)A
(uf,len,\215ags\).)-.22 E F1(Recv)6.58 E F0 1.08(is a v)3.83 F 1.08(ariant of)
-.275 F F1(recvfrom)3.83 E F0 1.08(in which the the address of the)3.83 F
(sending application is not returned.)136.4 696.6 Q<83>111.4 713.2 Q F1
(recvmsg)136.4 713.2 Q F0(\(s,msg_struct,\215ags\).)A F1(Recvmsg)5.487 E F0
2.738(is the scatter)5.488 F(-g)-.22 E 2.738(ather v)-.055 F 2.738(ersion of)
-.165 F F1(recvfrom)5.488 E F0(.)A
(The message structure is the same as the one used for)136.4 726.2 Q F1
(sendmsg)2.75 E F0(.)A(From)181.796 769 Q/F3 11/Times-Italic@0 SF(IEEE/A)2.75 E
(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75
E EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-5-)295.987 49 Q<83>111.4 85 Q/F1 11/Helvetica@0 SF
(read)136.4 85 Q F0(\(s,b)A 3.943(uf,len\). Read)-.22 F 1.192
(is the standard UNIX\256 system call for reading from a \214le or)3.943 F
(sock)136.4 98 Q 2.75(et. Lik)-.11 F(e)-.11 E F1(recv)2.75 E F0
(it does not return the address of the sending application.)2.75 E 1.078
(Each of these routines calls a common routine,)86.4 114.6 R F1(recvit)3.829 E
F0 1.079(which checks the v)3.829 F 1.079(alidity of the applica-)-.275 F 1.308
(tions b)86.4 127.6 R(uf)-.22 E 1.308(fers and then calls)-.275 F F1(soreceiv)
4.058 E(e)-.275 E F0 1.307(to actually cop)4.057 F 4.057(yt)-.11 G 1.307
(he UDP data from the inbound sock)344.469 127.6 R(et)-.11 E 1.23
(queue into the application')86.4 140.6 R 3.98(ss)-.605 G 3.98(pace. If)219.646
140.6 R 1.231(the application tried to read from a sock)3.98 F 1.231
(et which had no)-.11 F(data w)86.4 153.6 Q(aiting,)-.11 E F1(soreceiv)2.75 E
(e)-.275 E F0(will block, w)2.75 E(aiting for data.)-.11 E/F2 11/Times-Bold@0
SF 2.75(3.3. Differ)86.4 179.6 R(ences in SUN 4.1.1)-.198 E F0 .835(The netw)
111.4 196.2 R .834(orking portion of the SUN 4.1.1 Operating System has almost\
 the same structure)-.11 F(as the BSD code.)86.4 209.2 Q(There were only tw)5.5
E 2.75(od)-.11 G(if)267.141 209.2 Q(ferences of note.)-.275 E .036
(First, the SUN code has a special v)111.4 225.8 R .037
(ersion of the UDP sending code for use by the k)-.165 F .037(ernel res-)-.11 F
.282(ident part of the Netw)86.4 238.8 R .282(ork File System \(NFS\).)-.11 F
.282(This code has been optimized to mak)5.782 F 3.032(et)-.11 G .282
(he types of)469.569 238.8 R .729(UDP calls made by NFS slightly f)86.4 251.8 R
(aster)-.11 E 6.229(.S)-.605 G .729
(ome of these optimizations turned out to be similar to)276.259 251.8 R .021(t\
hose we made to the UDP code in general and where we concluded the results wer\
e close enough)86.4 264.8 R(as to mak)86.4 277.8 Q 2.75(en)-.11 G 2.75(od)
141.587 277.8 S(if)155.337 277.8 Q(ference, we left the SUN code as it w)-.275
E(as.)-.11 E .766
(Second, the SUN code normally does not checksum UDP datagrams when sending.)
111.4 294.4 R(Ho)6.267 E(w-)-.275 E -2.365 -.275(ev e)86.4 307.4 T 1.156 -.44
(r, m).275 H(an).44 E 3.026(ys)-.165 G .276
(ystem managers insist on turning the checksum on to better protect ag)141.809
307.4 R .275(ainst corrupted)-.055 F 1.85(data pack)86.4 320.4 R 1.85
(ets in applications lik)-.11 F 4.6(et)-.11 G 1.85(he NFS.)241.774 320.4 R
1.851(Furthermore, since we were interested in studying)7.35 F .687
(combined checksum and cop)86.4 333.4 R 3.437(yl)-.11 G .687
(oops, it made sense to start with softw)227.737 333.4 R .687
(are that did the checksum.)-.11 F(So we changed the code to al)86.4 346.4 Q
-.11(wa)-.11 G(ys perform the checksum.).11 E F2 2.75(4. Experimental)86.4
372.4 R -.275(Ap)2.75 G(pr).275 E(oach)-.198 E F0 2.053 -.88(We c)111.4 389 T
.293(hose to try to optimize UDP while retaining the basic structure of the BS\
D netw).88 F(orking)-.11 E 4.649(code. W)86.4 402 R 4.649(et)-.88 G 1.898
(ook this approach for tw)139.412 402 R 4.648(or)-.11 G 4.648
(easons. Pragmatically)268.241 402 R 4.648(,s)-.715 G 1.898
(ubstantial modi\214cations to the)379.782 402 R 1.383(BSD structure w)86.4 415
R 1.384
(ould force us to change code for protocols other than UDP and we needed to)
-.11 F .337(bound our ef)86.4 428 R 3.086(fort. From)-.275 F .336(an e)3.086 F
.336(xperimental perspecti)-.165 F -.165(ve)-.275 G 3.086(,l).165 G(ar)326.771
428 Q .336(ge scale changes to the code w)-.198 F .336(ould mak)-.11 F(e)-.11 E
(it more dif)86.4 441 Q(\214cult to identify the ef)-.275 E
(fects of particular optimizations.)-.275 E 3.207(Am)111.4 457.6 S .457
(ore radical restructuring of the code has been done at Uni)131.107 457.6 R
1.888 -.715(v. C)-.275 H .458(alifornia Berk).715 F(ele)-.11 E 3.208(yf)-.165 G
.458(or the)492.587 457.6 R 1.549(4.4 BSD release.)86.4 470.6 R 1.549
(As part of the Berk)7.049 F(ele)-.11 E 4.298(yr)-.165 G 1.548
(estructuring, some optimizations were made to the)287 470.6 R 1.159
(UDP code by V)86.4 483.6 R 1.159(an Jacobson and Mik)-1.221 F 3.909(eK)-.11 G
3.909(arels. Man)271.899 483.6 R 3.909(yo)-.165 G 3.909(ft)336.983 483.6 S 1.16
(heir optimizations are similar to ours.)347.613 483.6 R(\(W)86.4 496.6 Q 4.747
(ew)-.88 G 1.997(ere not a)117.14 496.6 R -.11(wa)-.165 G 1.997
(re of each other').11 F 4.747(sw)-.605 G 1.997
(ork until both projects were lar)266.182 496.6 R 1.996(gely done\).)-.198 F
1.996(Where the)7.496 F(Berk)86.4 509.6 Q(ele)-.11 E 3.233(yw)-.165 G .484
(ork is particularly insightful or dif)136.9 509.6 R .484(ferent from our w)
-.275 F .484(ork, we occasionally comment on)-.11 F(the 4.4 BSD w)86.4 522.6 Q
(ork in footnotes.)-.11 E F2 2.75(4.1. Optimizing)86.4 548.6 R(with)2.75 E F1
(Gprof)2.75 E F0 .56(The initial step in the process w)111.4 565.2 R .559
(as to pro\214le the k)-.11 F .559(ernel to get a sense of where the protocol)
-.11 F .76(bottlenecks appeared to be.)86.4 578.2 R 2.52 -.88(We u)6.26 H .76
(sed the).88 F F1(gprof)3.51 E F0 .761
(pro\214ling application that both tracks the amount)3.51 F 1.466
(of time spent in each routine and also produces call graphs which sho)86.4
591.2 R 4.215(ww)-.275 G 1.465(hich routines called)429.318 591.2 R .831
(other routines and ho)86.4 604.2 R 3.581(wm)-.275 G .832
(uch time in each routine is the result of a call from a particular parent)
201.88 604.2 R(routine.)86.4 617.2 Q F1(Gprof)111.4 633.8 Q F0 .558
(displays its results in tw)3.309 F 3.308(of)-.11 G 3.308(orms. First,)262.545
633.8 R .558(it produces a chart displaying the call graph.)3.308 F .842
(Functions are listed in order of ho)86.4 646.8 R 3.592(wm)-.275 G .842
(uch time the)260.363 646.8 R 3.593(yt)-.165 G .843
(ook \(including calls to subroutines\), along)328.417 646.8 R .105
(with a list of the routines that called them and the subroutines called.)86.4
659.8 R(Second,)5.605 E F1(gprof)2.855 E F0 .105(lists the total)2.855 F
(time spent in each function.)86.4 672.8 Q .805(In general,)111.4 689.4 R F1
(gprof)3.555 E F0 .806(is a useful tool for pro\214ling systems.)3.555 F .806
(It does, ho)6.306 F(we)-.275 E -.165(ve)-.275 G 1.686 -.44(r, h).165 H -2.475
-.22(av e).44 H .806(at least one)3.776 F .977(serious \215a)86.4 702.4 R .977
(w: it assumes that all calls to a function tak)-.165 F 3.726(et)-.11 G .976
(he same time.)342.212 702.4 R .976(Thus when it b)6.476 F .976(uilds the)-.22
F .455(call graphs, the percentage of time spent in a subroutine is simply est\
imated by di)86.4 715.4 R .455(viding the total)-.275 F 1.916
(time spent in the subroutine by the number of times the subroutine w)86.4
728.4 R 1.916(as called by the parent)-.11 F(From)181.796 769 Q/F3 11
/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G
(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-6-)295.987 49 Q 3.316(function. This)86.4 85 R .566
(problem is well-documented in the)3.316 F/F1 11/Helvetica@0 SF(gprof)3.316 E
F0 .566(manual pages, ho)3.316 F(we)-.275 E -.165(ve)-.275 G 3.317(rw).165 G
3.317(ed)457.321 85 S .567(id for)471.022 85 R .567(get it)-.198 F .643(more t\
han once in the heat of analysis \(sometimes with bene\214cial results \255 se\
e the discussion of)86.4 98 R(in-line IP checksums belo)86.4 111 Q(w\).)-.275 E
/F2 11/Times-Bold@0 SF 2.75(4.2. T)86.4 137 R(est Cases)-1.012 E F0 3.682 -.88
(To g)111.4 153.6 T 1.923(enerate pro\214les, we used a test application that \
sent UDP datagrams to the discard).88 F(serv)86.4 166.6 Q 1.08
(er [16] on the same machine o)-.165 F -.165(ve)-.165 G 3.83(ras).165 G(oftw)
274.769 166.6 Q 1.08(are loopback using the)-.11 F F1(sendto)3.83 E F0 1.08
(system call.)3.83 F(\(The)6.58 E .975(discard serv)86.4 179.6 R .975
(er simply thro)-.165 F .975(ws a)-.275 F -.11(wa)-.165 G 3.725(ya).11 G 1.305
-.165(ny d)250.94 179.6 T .975(ata sent to it\).).165 F .975(Pro\214les o)6.475
F -.165(ve)-.165 G 3.725(rt).165 G .975(he loopback sho)403.625 179.6 R .976
(wed both)-.275 F .685(sending and recei)86.4 192.6 R .684(ving costs.)-.275 F
.684(The tw)6.184 F 3.434(ob)-.11 G .684
(asic tests were to send 200,000 datagrams, each contain-)264.262 192.6 R 1.537
(ing 64-bytes of data, and 200,000 datagrams containing 512-bytes of data.)86.4
205.6 R 1.538(The tw)7.038 F 4.288(od)-.11 G(atagram)482.969 205.6 Q .792
(sizes were chosen to represent common transfer e)86.4 218.6 R .792
(xtremes: 64-bytes for small datagrams such as)-.165 F .565
(those used for RPC calls and 512-bytes to represent lar)86.4 231.6 R .565
(ger datagrams such as those generated by)-.198 F(distrib)86.4 244.6 Q 1.124
(uted \214le systems when the)-.22 F 3.874(yt)-.165 G 1.124
(ransfer \214le blocks.)247.164 244.6 R 1.124(Because 64 and 512 are both po)
6.624 F 1.124(wers of)-.275 F(tw)86.4 257.6 Q 1.811
(o, and may therefore bene\214t from v)-.11 F 1.812
(arious memory handling routines that might f)-.275 F -.22(avo)-.11 G 4.562(rs)
.22 G(uch)502.516 257.6 Q .329(sizes, we also tested our slo)86.4 270.6 R .329
(west and f)-.275 F .329
(astest implementations with data sizes of 59 and 509 bytes.)-.11 F .202
(Initial e)111.4 287.2 R .202(xperimentation with the test application sho)
-.165 F .203(wed that there were tw)-.275 F 2.953(om)-.11 G .203(inor problems)
456.784 287.2 R .687(\(from an e)86.4 300.2 R(xperimenter')-.165 E 3.437(sp)
-.605 G .687(oint of vie)202.85 300.2 R .686
(w\) with the standard discard daemon supplied with both the)-.275 F .94
(Mach and the SUN code.)86.4 313.2 R .941(First, the recei)6.44 F -.165(ve)
-.275 G 3.691(rb).165 G(uf)295.19 313.2 Q .941(fer space w)-.275 F .941
(as not lar)-.11 F .941(ge enough.)-.198 F .941(Some inbound)6.441 F .384
(UDP datagrams were being dropped without being fully processed.)86.4 326.2 R
.383(Second, the discard program)5.884 F -.11(wa)86.4 339.2 S 2.979(si).11 G
.229(mplemented as part of a lar)109.432 339.2 R .229(ger program that pro)
-.198 F .23(vided se)-.165 F -.165(ve)-.275 G .23(ral services at once.).165 F
1.99 -.88(To \214)5.73 H .23(gure out).88 F 1.677(which service had data w)86.4
352.2 R 1.676(aiting, the application used the)-.11 F F1(select)4.426 E F0
1.676(system call to \214nd out which)4.426 F(sock)86.4 365.2 Q 1.233
(ets had recei)-.11 F -.165(ve)-.275 G 3.984(dd).165 G 3.984(ata. The)188.825
365.2 R 1.234(result w)3.984 F 1.234(as that a considerable amount of time w)
-.11 F 1.234(as spent in the)-.11 F F1(select)86.4 378.2 Q F0 .779
(system call, which w)3.529 F .779(as not of interest.)-.11 F 2.539 -.88(To a)
6.279 H -.22(vo).66 G .778(id these issues, the standard discard serv).22 F(er)
-.165 E -.11(wa)86.4 391.2 S 2.75(sr).11 G(eplaced with a v)109.808 391.2 Q
(ersion that allocated e)-.165 E(xtra recei)-.165 E -.165(ve)-.275 G 2.75(rs)
.165 G(pace and did not call)339.356 391.2 Q F1(select)2.75 E F0(.)A F2 2.75
(4.3. General)86.4 417.2 R -.275(Ap)2.75 G(pr).275 E(oach)-.198 E F0 .311
(The optimizations were done in tw)111.4 433.8 R 3.061(os)-.11 G 3.061
(tages. In)278.75 433.8 R .312(the \214rst stage, we look)3.061 F .312
(ed for w)-.11 F .312(ays to reduce)-.11 F .912(the per)86.4 446.8 R(-pack)-.22
E .912(et o)-.11 F -.165(ve)-.165 G 3.662(rhead. These).165 F .911
(changes were generally simple to mak)3.661 F .911(e, a matter of changing a)
-.11 F(fe)86.4 459.8 Q 3.409(wl)-.275 G .659(ines of code.)109.081 459.8 R .659
(In the second stage we tried to impro)6.159 F .989 -.165(ve d)-.165 H .659
(ata handling \(in particular).165 F 3.41(,c)-.44 G(ombine)485.4 459.8 Q .723
(checksum and cop)86.4 472.8 R 3.472(yl)-.11 G 3.472(oops\). Changing)181.022
472.8 R .722(the data handling code required considerably more ef)3.472 F
(fort,)-.275 E(although the payof)86.4 485.8 Q(fs pro)-.275 E -.165(ve)-.165 G
2.75(dd).165 G(ramatic.)217.773 485.8 Q .44 LW 518.396 497.05 86.4 497.05 DL F2
-1.012(Ta)220.052 507.3 S(ble 1a: Initial P)1.012 E(erf)-.22 E(ormance \(386\))
-.275 E(64-byte datagrams)238.843 520.3 Q(512-byte datagrams)395.414 520.3 Q
(Code Section)92.939 533.3 Q -.198(Ti)212.832 533.3 S(me \(seconds\)).198 E
2.75(%o)302.827 533.3 S 2.75(fT)322.077 533.3 S 16.867(otal T)334.815 533.3 R
(ime \(seconds\))-.198 E 2.75(%o)462.148 533.3 S 2.75(fT)481.398 533.3 S(otal)
494.136 533.3 Q 518.396 538.05 86.4 538.05 DL F1(sosend)92.939 548.3 Q F0
55.829(25.94 2.7%)238.396 548.3 R 53.079(26.33 2.6%)400.467 548.3 R F1
(udp_usrreq)92.939 561.3 Q F0(&)2.75 E F1(output)2.75 E F0 55.829(29.17 4.3%)
238.396 561.3 R 53.079(32.17 3.2%)400.467 561.3 R F1(ip_output)92.939 574.3 Q
F0 55.829(14.46 1.5%)238.396 574.3 R 53.079(13.93 1.4%)400.467 574.3 R F1
(ipintr)92.939 587.3 Q F0 55.829(18.99 2.0%)238.396 587.3 R 53.079(18.49 1.8%)
400.467 587.3 R F1(udp_input)92.939 600.3 Q F0 55.829(32.29 3.4%)238.396 600.3
R 53.079(34.99 3.4%)400.467 600.3 R F1(in_c)92.939 613.3 Q(ksum)-.22 E F0
55.829(47.64 5.0%)238.396 613.3 R 53.079(98.82 9.7%)400.467 613.3 R F1
(soreceiv)92.939 626.3 Q(e)-.275 E F0 55.829(28.88 3.1%)238.396 626.3 R 53.079
(28.73 2.8%)400.467 626.3 R 518.396 631.05 86.4 631.05 DL 518.396 633.05 86.4
633.05 DL -.88(To)92.939 643.3 S(tal UDP/IP/Sock).88 E 44.389(et 193.37)-.11 F
47.579(20.6% 253.45 24.9%)316.225 643.3 R 518.396 648.05 86.4 648.05 DL -.88
(To)92.939 658.3 S(tal K).88 E(ernel T)-.275 E 56.874(ime 936.03)-.385 F 42.079
(100.0% 1018.36 100.0%)310.725 658.3 R 518.396 663.05 86.4 663.05 DL 452.339
523.05 452.339 663.05 DL 362.344 510.05 362.344 663.05 DL 293.018 523.05
293.018 663.05 DL 203.023 510.05 203.023 663.05 DL 518.396 497.05 518.396
663.05 DL 86.4 497.05 86.4 663.05 DL F2 2.75(5. Initial)86.4 690.3 R(System)
2.75 E F0 .264(The initial pro\214le of both systems is sho)111.4 706.9 R .264
(wn in T)-.275 F .264(ables 1a and 1b belo)-.88 F 4.444 -.715(w. F)-.275 H .264
(or each major rou-).55 F .971(tine, the table sho)86.4 719.9 R .97(ws the tot\
al number of seconds spent in that routine and its local subroutines.)-.275 F
2.118(\(By local subroutines, we mean those routines called by the listed proc\
edures which are not)86.4 732.9 R(From)181.796 769 Q/F3 11/Times-Italic@0 SF
(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0
(\(August 1993\))2.75 E EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-7-)295.987 49 Q(themselv)86.4 85 Q .436
(es included in the table\).)-.165 F .435(The listing for the)5.936 F/F1 11
/Helvetica@0 SF(ip_output)3.185 E F0 .435(routine does not include the cost)
3.185 F(of calls to the loopback interf)86.4 98 Q(ace')-.11 E 2.75(so)-.605 G
(utput routine.)245.757 98 Q .44 LW 518.396 109.25 86.4 109.25 DL/F2 11
/Times-Bold@0 SF -1.012(Ta)214.343 119.5 S(ble 1b: Initial P)1.012 E(erf)-.22 E
(ormance \(Spar)-.275 E(c\))-.198 E(64-byte datagrams)238.843 132.5 Q
(512-byte datagrams)395.414 132.5 Q(Code Section)92.939 145.5 Q -.198(Ti)
212.832 145.5 S(me \(seconds\)).198 E 2.75(%o)302.827 145.5 S 2.75(fT)322.077
145.5 S 16.867(otal T)334.815 145.5 R(ime \(seconds\))-.198 E 2.75(%o)462.148
145.5 S 2.75(fT)481.398 145.5 S(otal)494.136 145.5 Q 518.396 150.25 86.4 150.25
DL F1(sosend)92.939 160.5 Q F0 55.829(10.48 5.8%)238.396 160.5 R 55.829
(12.02 5.7%)397.717 160.5 R F1(udp_usrreq)92.939 173.5 Q F0(&)2.75 E F1(output)
2.75 E F0 50.329(23.24 12.8)238.396 173.5 R 55.829(20.65 9.8%)397.717 173.5 R
F1(ip_output)92.939 186.5 Q F0 55.829(6.56 3.6% 6.35 2.0%)243.896 186.5 R F1
(ipintr)92.939 199.5 Q F0 55.829(5.30 2.9% 6.38 3.0%)243.896 199.5 R F1
(udp_input)92.939 212.5 Q F0 55.829(15.37 8.5%)238.396 212.5 R 55.829
(16.83 8.0%)397.717 212.5 R F1(in_c)92.939 225.5 Q(ksum)-.22 E F0 55.829
(12.92 7.1%)238.396 225.5 R 55.829(17.84 8.4%)397.717 225.5 R F1(soreceiv)
92.939 238.5 Q(e)-.275 E/F3 9/Times-Roman@0 SF(1)-3.6 I F0 55.829(9.24 5.1%)
243.896 238.5 R 55.829(11.41 5.4%)397.717 238.5 R 518.396 243.25 86.4 243.25 DL
518.396 245.25 86.4 245.25 DL -.88(To)92.939 255.5 S(tal UDP/IP/Sock).88 E
49.889(et 83.11)-.11 F 50.329(45.8% 91.48 43.3%)316.225 255.5 R 518.396 260.25
86.4 260.25 DL -.88(To)92.939 270.5 S(tal K).88 E(ernel T)-.275 E 56.874
(ime 181.42)-.385 F 44.829(100.0% 211.33 100.0%)310.725 270.5 R 518.396 275.25
86.4 275.25 DL 452.339 135.25 452.339 275.25 DL 362.344 122.25 362.344 275.25
DL 293.018 135.25 293.018 275.25 DL 203.023 122.25 203.023 275.25 DL 518.396
109.25 518.396 275.25 DL 86.4 109.25 86.4 275.25 DL .283
(Probably the most signi\214cant observ)86.4 293.1 R .283
(ation that can be made from these tables is that the total time)-.275 F .76
(spent in the sock)86.4 306.1 R .76(et and UDP and IP code is rather small, e)
-.11 F -.165(ve)-.275 G 3.51(nt).165 G .76(hough the test systems were just)
372.524 306.1 R 1.076(running the UDP test applications.)86.4 319.1 R 1.076
(On the 386 processor)6.576 F(,)-.44 E F1(gprof)3.826 E F0(re)3.826 E -.165(ve)
-.275 G 1.077(aled that a).165 F/F4 11/Times-Italic@0 SF(majority)3.827 E F0
1.077(of the)3.827 F -.11(ke)86.4 332.1 S(rnel').11 E 3.072(st)-.605 G .322
(ime w)127.246 332.1 R .321(as spent simply handling interrupts and managing c\
hanges in processor priority to)-.11 F .576(protect critical code re)86.4 345.1
R 3.326(gions. On)-.165 F .576(the Sparc, less than 50% of the time in the k)
3.326 F .577(ernel is actually in)-.11 F .018(UDP or IP code.)86.4 358.1 R .017
(It is interesting to observ)5.518 F 2.767(et)-.165 G .017
(hat the time spent e)284.679 358.1 R -.165(xe)-.165 G .017
(cuting UDP/IP and sock).165 F .017(et code)-.11 F .375
(in both 386 and Sparc is only a f)86.4 371.1 R .375(actor of tw)-.11 F 3.125
(oa)-.11 G .375(part, while the o)294.079 371.1 R -.165(ve)-.165 G .375(rall k)
.165 F .375(ernel times dif)-.11 F .375(fer by a f)-.275 F(ac-)-.11 E
(tor of four)86.4 384.1 Q 5.5(.A)-.605 G(major dif)149.947 384.1 Q
(ference between the processors is in ho)-.275 E 2.75(wt)-.275 G(he)376.063
384.1 Q 2.75(yh)-.165 G(andle o)400.032 384.1 Q -.165(ve)-.165 G(rhead acti)
.165 E(vities.)-.275 E F2 2.75(6. Reducing)86.4 410.1 R -.22(Pe)2.75 G -.407
(r-).22 G -.11(Pa).407 G(ck).11 E(et Ov)-.11 E(erhead)-.11 E F0 1.635
(The \214rst step w)111.4 426.7 R 1.635(as to try to reduce the per)-.11 F
(-pack)-.22 E 1.635(et o)-.11 F -.165(ve)-.165 G 4.384(rhead. The).165 F(impro)
4.384 E -.165(ve)-.165 G 1.634(ments in).165 F -.22(vo)-.44 G(lv).22 E(ed)-.165
E 1.128(either e)86.4 439.7 R 1.128(xploiting locality)-.165 F 3.878(,o)-.715 G
3.878(rr)208.067 439.7 S 1.128(eplacing e)219.271 439.7 R(xcessi)-.165 E -.165
(ve)-.275 G 1.128(ly general purpose code with simpler and f).165 F(aster)-.11
E(special purpose code.)86.4 452.7 Q F2 2.75(6.1. In-Line)86.4 478.7 R
(Checksum of IP Header)2.75 E F0 2.453(Although T)111.4 495.3 R 2.453
(able 1 does not sho)-.88 F 5.203(wi)-.275 G 2.453
(t, the initial pro\214le sho)274.068 495.3 R 2.453
(wed that a surprisingly lar)-.275 F(ge)-.198 E .847
(amount of time on the 386 processor w)86.4 508.3 R .847
(as spent calling the IP checksum routine from)-.11 F F1(ipintr)3.597 E F0(and)
3.597 E F1(ip_output)86.4 521.3 Q F0 .513(to checksum the 20-byte IP header)
3.263 F 6.013(.T)-.605 G .513(he call trace sho)304.799 521.3 R .512
(wed that about 25% of the time)-.275 F(in)86.4 534.3 Q F1(ip_input)3.397 E F0
.647(and o)3.397 F -.165(ve)-.165 G 3.397(r5).165 G .647(0% of the time in)
187.669 534.3 R F1(ip_output)3.397 E F0 .648
(were actually spent in the checksum routine.)3.398 F 1.075(In reality)86.4
547.3 R 3.825(,t)-.715 G 1.075(his w)136.411 547.3 R 1.075(as a case of)-.11 F
F1(gprof)3.825 E F0 1.074
(amortizing the cost of calling the checksum routine o)3.825 F -.165(ve)-.165 G
3.824(ra).165 G(ll)512.284 547.3 Q .237(calls and a)86.4 560.3 R -.165(ve)-.22
G .237(raging the cost of doing IP header checksums with the cost of doing che\
cksums o).165 F -.165(ve)-.165 G(r).165 E .067(entire datagrams.)86.4 573.3 R
.067(So the header checksum costs were some)5.567 F .066(what lo)-.275 F .066
(wer than)-.275 F F1(gprof)2.816 E F0 2.816(suggested. But)2.816 F(the observ)
86.4 586.3 Q(ation still lead to a potential optimization.)-.275 E 2.995(Aq)
111.4 602.9 S .246(uick in)127.837 602.9 R -.165(ve)-.44 G(stig).165 E .246
(ation of the checksum routine sho)-.055 F .246
(wed that it had been optimized for check-)-.275 F 1.412(summing long pack)86.4
615.9 R 4.162(ets. Clearly)-.11 F 1.412(this w)4.162 F 1.412
(as not optimal for the short IP header checksum \(which)-.11 F 1.079
(must be done on e)86.4 628.9 R -.165(ve)-.275 G 1.079(ry IP datagram\).).165 F
1.079(There w)6.579 F 1.08(as a choice of approaches: the checksum routine)-.11
F .116(could be reoptimized, or)86.4 641.9 R 2.866(,g)-.44 G -2.365 -.275(iv e)
204.96 641.9 T 2.866(nt).275 G .115(hat the IP header checksum w)229.386 641.9
R .115(as almost al)-.11 F -.11(wa)-.11 G .115(ys done on a 20-byte).11 F .325
(header \(adding options to IP datagrams is not common\), the IP header checks\
um could be put in-)86.4 654.9 R(line.)86.4 667.9 Q .36 LW 90.9 694.2 86.4
694.2 DL 95.4 694.2 90.9 694.2 DL 99.9 694.2 95.4 694.2 DL 104.4 694.2 99.9
694.2 DL 108.9 694.2 104.4 694.2 DL 113.4 694.2 108.9 694.2 DL 117.9 694.2
113.4 694.2 DL 122.4 694.2 117.9 694.2 DL 126.9 694.2 122.4 694.2 DL 131.4
694.2 126.9 694.2 DL 135.9 694.2 131.4 694.2 DL 140.4 694.2 135.9 694.2 DL
144.9 694.2 140.4 694.2 DL 149.4 694.2 144.9 694.2 DL 153.9 694.2 149.4 694.2
DL 158.4 694.2 153.9 694.2 DL/F5 7/Times-Roman@0 SF(1)96.4 704.2 Q F3 -.315(Ti)
4.5 2.8 O(me spent in sorecei).315 E .27 -.135(ve d)-.225 H
(oes not include time spent in).135 E/F6 9/Times-Italic@0 SF(sbwait)2.25 E F3
2.25(,w)C(aiting for pack)336.123 707 Q(ets to arri)-.09 E -.135(ve)-.225 G(.)
.135 E F0(From)181.796 769 Q F4(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G
(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-8-)295.987 49 Q -.165(Fo)111.4 85 S 4.859(rt).165 G
2.109(he immediate problem of the IP header checksum, the in-line option seeme\
d best.)134.431 85 R .034(Most systems can checksum 20 bytes in about 6 to 8 a\
ssembler instructions, which is less than the)86.4 98 R .508
(cost of making a procedure call \(much less doing an)86.4 111 R .508
(ything in the procedure\).)-.165 F .507(So we installed an)6.008 F .885
(in-line checksum.)86.4 124 R .885(The code implemented a portable v)6.385 F
.885(ersion of the checksum in both)-.165 F/F1 11/Helvetica@0 SF(ipintr)3.636 E
F0(and)3.636 E F1(ip_output)86.4 137 Q F0 1.399(which required about 20 instru\
ctions to compute the checksum for 20-byte headers.)4.149 F .203(Headers lar)
86.4 150 R .203(ger than 20-bytes \(i.e. IP headers with options\) were still \
checksummed by the re)-.198 F(gular)-.165 E(checksum routine.)86.4 163 Q/F2 9
/Times-Roman@0 SF(2)-3.6 I F0(The 386 results are sho)2.75 3.6 M(wn in T)-.275
E(able 2a.)-.88 E .44 LW 475.771 174.25 129.029 174.25 DL/F3 11/Times-Bold@0 SF
-1.012(Ta)193.896 184.5 S(ble 2a \255 In-Line IP Header Checksum \(386\))1.012
E(64-byte datagrams)264.202 197.5 Q(512-byte datagrams)375.104 197.5 Q
(Code Section)134.529 210.5 Q(old time)259.467 210.5 Q(new time)314.159 210.5 Q
(old time)373.119 210.5 Q(new time)427.811 210.5 Q 475.771 215.25 129.029
215.25 DL F1(in_c)134.529 225.5 Q(ksum)-.22 E F0 29.326
(47.64 30.29 98.82 85.46)266.188 225.5 R F1(ip_output)134.529 238.5 Q F0 29.326
(14.46 16.27 13.93 15.60)266.188 238.5 R F1(ipintr)134.529 251.5 Q F0 29.326
(18.99 21.26 18.49 20.93)266.188 251.5 R 475.771 256.25 129.029 256.25 DL
475.771 258.25 129.029 258.25 DL 419.561 200.25 419.561 256.25 DL 305.909
200.25 305.909 256.25 DL -.385(Ti)134.529 268.5 S(me Impro).385 E -.165(ve)
-.165 G 73.865(ment 13.27).165 F(9.25)412.07 268.5 Q 475.771 273.25 129.029
273.25 DL 2.75(%U)134.529 283.5 S(DP/IP Impro)154.384 283.5 Q -.165(ve)-.165 G
50.869(ment 7.9%).165 F(4.0%)410.238 283.5 Q 475.771 288.25 129.029 288.25 DL
364.869 187.25 364.869 288.25 DL 251.217 187.25 251.217 288.25 DL 475.771
174.25 475.771 288.25 DL 129.029 174.25 129.029 288.25 DL .614
(The results appear to con\214rm the utility of the in-line checksum.)111.4
306.1 R .614(The cost of doing the in-)6.114 F .471
(line checksum caused a modest increase in the cost of)86.4 319.1 R F1
(ip_output)3.222 E F0(and)3.222 E F1(ipintr)3.222 E F0 -.22(bu)3.222 G 3.222
(tp).22 G .472(roduced a sharp)447.815 319.1 R
(reduction in checksumming costs.)86.4 332.1 Q .296(When the SUN code w)111.4
348.7 R .296(as e)-.11 F .296(xamined it pro)-.165 F -.165(ve)-.165 G 3.046(dt)
.165 G 3.045(oa)317.235 348.7 S .295(lready ha)330.664 348.7 R .625 -.165(ve a)
-.22 H 3.045(ni).165 G .295(n-line IP checksum imple-)401.113 348.7 R 1.126
(mented in)86.4 361.7 R F1(ipintr)3.876 E F0 1.126(and in the NFS v)3.876 F
1.127(ersion of)-.165 F F1(ip_output)3.877 E F0 6.627(.H)C -.275(ow)348.078
361.7 S -2.365 -.275(ev e).275 H 2.007 -.44(r, t).275 H 1.127(he re).44 F
(gular)-.165 E F1(ip_output)3.877 E F0(routine)3.877 E(did not ha)86.4 374.7 Q
.33 -.165(ve a)-.22 H 2.75(ni).165 G(n-line checksum, so we added it.)159.341
374.7 Q -.88(Ta)5.5 G(ble 2b sho).88 E(ws the impro)-.275 E -.165(ve)-.165 G
(ment.).165 E 475.771 385.95 129.029 385.95 DL F3 -1.012(Ta)188.187 396.2 S
(ble 2b \255 In-Line IP Header Checksum \(Spar)1.012 E(c\))-.198 E
(64-byte datagrams)264.202 409.2 Q(512-byte datagrams)375.104 409.2 Q
(Code Section)134.529 422.2 Q(old time)259.467 422.2 Q(new time)314.159 422.2 Q
(old time)373.119 422.2 Q(new time)427.811 422.2 Q 475.771 426.95 129.029
426.95 DL F1(in_c)134.529 437.2 Q(ksum)-.22 E F0 29.326
(12.92 10.05 17.84 17.20)266.188 437.2 R F1(ip_output)134.529 450.2 Q F0 34.826
(6.56 4.94 6.35 5.49)268.938 450.2 R 475.771 454.95 129.029 454.95 DL 475.771
456.95 129.029 456.95 DL 419.561 411.95 419.561 454.95 DL 305.909 411.95
305.909 454.95 DL -.385(Ti)134.529 467.2 S(me Impro).385 E -.165(ve)-.165 G
76.615(ment 4.49).165 F(1.50)412.07 467.2 Q 475.771 471.95 129.029 471.95 DL
2.75(%U)134.529 482.2 S(DP/IP Impro)154.384 482.2 Q -.165(ve)-.165 G 50.869
(ment 4.4%).165 F(1.4%)410.238 482.2 Q 475.771 486.95 129.029 486.95 DL 364.869
398.95 364.869 486.95 DL 251.217 398.95 251.217 486.95 DL 475.771 385.95
475.771 486.95 DL 129.029 385.95 129.029 486.95 DL .06(One oddity of both T)
86.4 504.8 R .06(ables 2a and 2b is that lar)-.88 F .059
(ger datagrams bene\214t less in absolute time from the)-.198 F .21
(elimination of the call to the checksum routine.)86.4 517.8 R .211
(On the 386, lar)5.711 F .211(ge pack)-.198 F .211(ets sa)-.11 F .541 -.165
(ve a l)-.22 H .211(ittle o).165 F -.165(ve)-.165 G 2.961(r9s).165 G(ec-)
504.969 517.8 Q .652(onds, while small pack)86.4 530.8 R .652(ets sa)-.11 F
.982 -.165(ve ove)-.22 H 3.402(r1).165 G 3.402(3s)255.378 530.8 S 3.402
(econds. Similarly)268.559 530.8 R .652(on the Sparc, lar)3.402 F .651(ge pack)
-.198 F .651(ets sa)-.11 F .981 -.165(ve o)-.22 H(nly).165 E .164
(1.5 seconds while small pack)86.4 543.8 R .164(ets sa)-.11 F .494 -.165(ve n)
-.22 H .164(early 4.5 seconds.).165 F .164(This dif)5.664 F .164
(ference is consistent across se)-.275 F(v-)-.275 E 1.077(eral pro\214les.)86.4
556.8 R 1.077(The ne)6.577 F 3.827(wc)-.275 G 1.077(ode contains no dependenc)
196.737 556.8 R 3.826(yo)-.165 G 3.826(nt)333.462 556.8 S 1.076
(he length of the pack)345.846 556.8 R 1.076(et, so we belie)-.11 F -.165(ve)
-.275 G(\(b)86.4 569.8 Q .661(ut ha)-.22 F .991 -.165(ve b)-.22 H .661
(een unable to pro).165 F -.165(ve)-.165 G 3.411(\)t).165 G .661(hat this dif)
234.84 569.8 R .661(ference represents a k)-.275 F .662(ernel ef)-.11 F .662
(fect probably related to)-.275 F 1.209
(interactions between interrupts \(which are more lik)86.4 582.8 R 1.209
(ely to interrupt processing on lar)-.11 F 1.208(ge pack)-.198 F(ets\))-.11 E
(and instruction and data cache management.)86.4 595.8 Q F3 2.75(6.2. Deleting)
86.4 621.8 R(Pseudo-Connect)2.75 E F0 1.022
(In the BSD system, UDP datagrams can be sent in one of tw)111.4 638.4 R 3.773
(ow)-.11 G 3.773(ays. A)406.156 638.4 R(sock)3.773 E 1.023(et can \214x its)
-.11 F .789(remote UDP address by using the)86.4 651.4 R F1(connect)3.539 E F0
.789(system call, after which the sock)3.539 F .789(et can only be used)-.11 F
.638(for sending to the address it is connected to.)86.4 664.4 R(Or)6.138 E
-6.137 3.388(,a s)-.44 H(ock)320.888 664.4 Q .639(et can use)-.11 F F1(sendto)
3.389 E F0 .639(to indi)3.389 F .639(vidually set the)-.275 F
(remote address for each UDP datagram sent.)86.4 677.4 Q .36 LW 90.9 694.2 86.4
694.2 DL 95.4 694.2 90.9 694.2 DL 99.9 694.2 95.4 694.2 DL 104.4 694.2 99.9
694.2 DL 108.9 694.2 104.4 694.2 DL 113.4 694.2 108.9 694.2 DL 117.9 694.2
113.4 694.2 DL 122.4 694.2 117.9 694.2 DL 126.9 694.2 122.4 694.2 DL 131.4
694.2 126.9 694.2 DL 135.9 694.2 131.4 694.2 DL 140.4 694.2 135.9 694.2 DL
144.9 694.2 140.4 694.2 DL 149.4 694.2 144.9 694.2 DL 153.9 694.2 149.4 694.2
DL 158.4 694.2 153.9 694.2 DL/F4 7/Times-Roman@0 SF(2)96.4 704.2 Q F2
(No IP headers with options were sent by the test application.)4.5 2.8 M F0
(From)181.796 769 Q/F5 11/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)
-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-9-)295.987 49 Q .884(In the 4.3 BSD code, using)111.4
85 R/F1 11/Helvetica@0 SF(sendto)3.633 E F0 .883
(with an address is treated as a special case of sending)3.633 F -.165(ove)86.4
98 S 3.059(rac).165 G .309(onnected sock)121.503 98 R 3.059(et. The)-.11 F .309
(code in)3.059 F F1(udp_output)3.059 E F0 .31
(goes through the standard procedure for inter)3.059 F(-)-.22 E 1.033
(nally connecting a remote address to the UDP sock)86.4 111 R(et')-.11 E 3.783
(sp)-.605 G 1.033(rotocol control block \(PCB\), sends the)343.967 111 R
(datagram, and then disconnects the remote address.)86.4 124 Q .345(No pack)
111.4 140.6 R .345(ets go o)-.11 F -.165(ve)-.165 G 3.095(rt).165 G .346
(he netw)203.376 140.6 R .346(ork for the connect procedure, b)-.11 F .346
(ut the operations of connecting)-.22 F .497(an address are still v)86.4 153.6
R .497(ery e)-.165 F(xpensi)-.165 E .827 -.165(ve a)-.275 H .497
(nd consume nearly a third of the cost of each UDP transmis-).165 F 2.75
(sion. There)86.4 166.6 R(are se)2.75 E -.165(ve)-.275 G
(ral reasons for this e).165 E(xpense.)-.165 E .097
(First, binding creates a race condition:)111.4 183.2 R .098
(during the time the remote address is set in the PCB,)5.597 F .446(the sock)
86.4 196.2 R .446(et cannot recei)-.11 F .776 -.165(ve i)-.275 H .446
(nbound datagrams from an).165 F 3.196(ys)-.165 G .446
(ystem other than the one it is sending to.)336.698 196.2 R .77
(This race condition occurs because on the inbound side,)86.4 209.2 R F1
(udp_input)3.521 E F0 .771(scans the list of UDP PCBs)3.521 F .764(looking for\
 a PCB that matches the source and destination address\(es\) of the inbound da\
tagram.)86.4 222.2 R 1.144(There is a chance that if an inbound datagram arri)
86.4 235.2 R -.165(ve)-.275 G 3.894(sw).165 G 1.144(hile a sock)341.773 235.2 R
1.144(et has temporarily bound its)-.11 F .847(destination address during a)
86.4 248.2 R F1(sendto)3.597 E F0 .847(call, a mistak)3.597 F .847
(en match \(or f)-.11 F .847(ailure to match\) may occur)-.11 F 6.346(.T)-.605
G(o)512.9 248.2 Q -.22(avo)86.4 261.2 S 1.041(id this race condition,).22 F F1
(udp_usrreq)3.791 E F0 1.042(must switch to a higher processor priority le)
3.791 F -.165(ve)-.275 G 3.792(lt).165 G 3.792(ob)484.666 261.2 S(lock)499.458
261.2 Q(out input interrupts.)86.4 274.2 Q
(On the 386 changing the processor priority le)5.5 E -.165(ve)-.275 G 2.75(li)
.165 G 2.75(se)397.293 274.2 S(xpensi)409.041 274.2 Q -.165(ve)-.275 G(.).165 E
.188(Second, the routine for binding to a remote address is a general purpose \
routine, intended to)111.4 290.8 R .467
(be called at connection setup time, and is not optimized to be called for e)
86.4 303.8 R -.165(ve)-.275 G .468(ry datagram.).165 F(Calling)5.968 E
(it repeatedly is e)86.4 316.8 Q(xpensi)-.165 E -.165(ve)-.275 G(.).165 E 2.352
-.88(To \214)111.4 333.4 T 3.342(xt).88 G .592(his problem,)144.099 333.4 R F1
(udp_output)3.342 E F0 -.11(wa)3.342 G 3.342(sr).11 G -.275(ev)285.419 333.4 S
.591(ised to send to a speci\214ed remote address without).275 F .168
(changing the sock)86.4 346.4 R .168(et PCB.)-.11 F .168
(This eliminated the race condition and got rid of the call to the general)
5.668 F 3.619(purpose connecting routine, although some code from this routine\
 had to be copied into)86.4 359.4 R F1(udp_output)86.4 372.4 Q F0(.)A/F2 9
/Times-Roman@0 SF(3)-3.6 I F0 2.02(The performance impro)111.4 389 R -.165(ve)
-.165 G 2.019(ments are in the sending side and in the priority management).165
F(code, and are sho)86.4 402 Q(wn in T)-.275 E(ables 3a and 3b)-.88 E 5.5(.T)
-.44 G(he impro)278.482 402 Q -.165(ve)-.165 G
(ment in performance is signi\214cant.).165 E .44 LW 518.388 413.25 86.4 413.25
DL/F3 11/Times-Bold@0 SF -1.012(Ta)205.66 423.5 S
(ble 3a\255 Deleting Pseudo-Connect \(386\))1.012 E 88.089(64-byte 512-byte)
312.39 436.5 R(Code Section)94.476 449.5 Q -.198(Ti)280.713 449.5 S 24.481
(me %).198 F(of T)2.75 E 24.481(otal T)-1.012 F 24.481(ime %)-.198 F(of T)2.75
E(otal)-1.012 E 518.388 454.25 86.4 454.25 DL F0
(Priority Mgmt/Interrupts \(old\))94.476 464.5 Q 32.126(543.32 58%)277.71 464.5
R 32.126(572.14 55.7%)406.125 464.5 R(Priority Mgmt/Interrupts \(ne)94.476
477.5 Q 43.27(w\) 541.30)-.275 F 32.126(60.2% 550.55 56.1%)342.836 477.5 R F1
(udp_usrreq)94.476 490.5 Q F0(&)2.75 E F1(udp_output)2.75 E F0 37.11
(\(old\) 29.17)2.75 F 37.626(4.3% 31.17 3.1%)348.336 490.5 R F1(udp_usrreq)
94.476 503.5 Q F0(&)2.75 E F1(udp_output)2.75 E F0(\(ne)2.75 E 33.117
(w\) 17.95)-.275 F 37.626(1.9% 17.87 1.8%)348.336 503.5 R 518.388 508.25 86.4
508.25 DL -.88(To)94.476 518.5 S(tal UDP/IP/Sock).88 E(et Impro)-.11 E -.165
(ve)-.165 G(ment).165 E F2(4)-3.6 I F0 37.626(11.22 6.6% 13.30 5.5%)283.21
518.5 R 518.388 523.25 86.4 523.25 DL 448.489 454.25 448.489 523.25 DL 394.011
426.25 394.011 523.25 DL 320.074 454.25 320.074 523.25 DL 265.596 426.25
265.596 523.25 DL 518.388 413.25 518.388 523.25 DL 86.4 413.25 86.4 523.25 DL
518.4 535.75 86.4 535.75 DL F3 -1.012(Ta)199.957 546 S
(ble 3b\255 Deleting Pseudo-Connect \(Spar)1.012 E(c\))-.198 E 89.237
(64-byte 512-byte)311.234 559 R(Code Section)95.584 572 Q -.198(Ti)277.895 572
S 25.055(me %).198 F(of T)2.75 E 25.055(otal T)-1.012 F 25.055(ime %)-.198 F
(of T)2.75 E(otal)-1.012 E 518.4 576.75 86.4 576.75 DL F0
(Priority Mgmt \(old\))95.584 587 Q F2(5)-3.6 I F0 40.95(1.53 0.8% 2.07)283.142
587 R(1.0%)472.905 587 Q(Priority Mgmt \(ne)95.584 600 Q 93.42(w\) 1.58)-.275 F
40.95(0.9% 2.15)346.092 600 R(1.0%)472.905 600 Q F1(udp_usrreq)95.584 613 Q F0
(&)2.75 E F1(udp_output)2.75 E F0 30.434(\(old\) 23.24)2.75 F 35.45
(12.4% 20.65)340.592 613 R(9.6%)472.905 613 Q F1(udp_usrreq)95.584 626 Q F0(&)
2.75 E F1(udp_output)2.75 E F0(\(ne)2.75 E 31.941(w\) 9.22)-.275 F 35.45
(5.1% 12.78)346.092 626 R(6.0%)472.905 626 Q 518.4 630.75 86.4 630.75 DL -.88
(To)95.584 641 S(tal UDP/IP/Sock).88 E(et Impro)-.11 E -.165(ve)-.165 G 24.802
(ment 14.02).165 F 40.95(7.5% 7.87)346.092 641 R(3.7%)472.905 641 Q 518.4
645.75 86.4 645.75 DL 445.731 576.75 445.731 645.75 DL 393.429 548.75 393.429
645.75 DL 316.168 576.75 316.168 645.75 DL 263.866 548.75 263.866 645.75 DL
518.4 535.75 518.4 645.75 DL 86.4 535.75 86.4 645.75 DL .36 LW 90.9 671 86.4
671 DL 95.4 671 90.9 671 DL 99.9 671 95.4 671 DL 104.4 671 99.9 671 DL 108.9
671 104.4 671 DL 113.4 671 108.9 671 DL 117.9 671 113.4 671 DL 122.4 671 117.9
671 DL 126.9 671 122.4 671 DL 131.4 671 126.9 671 DL 135.9 671 131.4 671 DL
140.4 671 135.9 671 DL 144.9 671 140.4 671 DL 149.4 671 144.9 671 DL 153.9 671
149.4 671 DL 158.4 671 153.9 671 DL/F4 7/Times-Roman@0 SF(3)96.4 681 Q F2 .404
(The 4.4 BSD implementation has gone further and actually restructured the UDP\
 data structures so that)4.5 2.8 N 2.25(ac)86.4 694.8 S(onnected sock)96.642
694.8 Q(et is an e)-.09 E(xceptional case of a unconnected sock)-.135 E
(et rather than the other w)-.09 E(ay around.)-.09 E F4(4)96.4 704.8 Q F2
(Impro)4.5 2.8 M -.135(ve)-.135 G(ment percentages are measured ag).135 E
(ainst the time spent in UDP/IP code in the original code.)-.045 E F4(5)96.4
717.6 Q F2 -.135(Fo)4.5 2.8 O 2.889(rt).135 G .639(he Sparc pro\214le, it w)
122.157 720.4 R .639(as possible to partially isolate the calls to particular)
-.09 F/F5 9/Helvetica@0 SF(spl)2.889 E F2 .639(routines by the UDP)2.889 F F0
(From)181.796 769 Q/F6 11/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)
-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-10-)293.237 49 Q/F1 11/Times-Bold@0 SF 2.75(6.3. Impr)
86.4 85 R -.11(ove)-.198 G 2.75(dO).11 G(ne-Behind Cache\(s\))165.732 85 Q F0
(A)111.4 101.6 Q/F2 11/Times-Italic@0 SF 1.051(one-behind cac)3.801 F(he)-.165
E F0 1.051(contains the PCB of the last UDP sock)3.801 F 1.051(et to recei)-.11
F 1.381 -.165(ve a d)-.275 H 3.8(atagram. The).165 F 1.471(reason for k)86.4
114.6 R 1.472
(eeping the one-behind cache is that there is a good chance that the ne)-.11 F
1.472(xt datagram)-.165 F(recei)86.4 127.6 Q -.165(ve)-.275 G 4.304(dw).165 G
1.554(ill be destined for the same sock)135.463 127.6 R 1.554(et as the pre)
-.11 F 1.554(vious datagram recei)-.275 F -.165(ve)-.275 G 4.304(d. K).165 F
1.553(eeping the)-.275 F(cache mak)86.4 140.6 Q(es it possible to a)-.11 E -.22
(vo)-.22 G(id a more e).22 E(xpensi)-.165 E .33 -.165(ve s)-.275 H
(earch of all the UDP PCBs.).165 E F1 2.75(6.3.1. Fixing)86.4 166.6 R
(the Reno Cache: W)2.75 E(ildcard Support)-.198 E F0 1.026(On the 4.3BSD T)
111.4 183.2 R 1.026(ahoe release, UDP does not ha)-.88 F 1.356 -.165(ve a o)
-.22 H 1.026(ne-behind cache of the UDP PCBs.).165 F(Ho)86.4 196.2 Q(we)-.275 E
-.165(ve)-.275 G .898 -.44(r, t).165 H .018(he 4.3 BSD Reno release does and w\
e incorporated the Reno cache into our UDP code.).44 F 1.687
(But when we tested the cache performance, the Reno cache had no ef)111.4 212.8
R 1.687(fect. The problem)-.275 F .219
(turned out to be that the caching code did not support wildcarding.)86.4 225.8
R -.44(Wi)5.719 G .219(ldcarding is the practice of).44 F 1.559
(specifying only part of the remote or local address and accepting an)86.4
238.8 R 4.31(yv)-.165 G 1.56(alue for the remaining)416.271 238.8 R 2.75
(\214elds. In)86.4 251.8 R
(the BSD code, UDP addresses can be classi\214ed into three types:)2.75 E 9.424
(\(1\) [<laddr)111.4 268.4 R(,lport><f)-.44 E(addr)-.11 E(,fport>])-.44 E 9.424
(\(2\) [<laddr)111.4 285 R(,lport><*,*>])-.44 E 9.424(\(3\) [<*,lport><*,*>])
111.4 301.6 R .243(where [lf]port is the local or foreign UDP port, [lf]addr i\
s the local or foreign IP address, and * is)86.4 318.2 R 3.027(aw)86.4 331.2 S
.277(ildcard \(i.e. `)102.253 331.2 R(`don')-.814 E 3.027(tc)-.198 G(are')
193.405 331.2 Q 3.027('\). When)-.814 F .277(an inbound UDP datagram is recei)
3.027 F -.165(ve)-.275 G .277(d, the UDP code looks).165 F 1.136(for the most \
complete \(least wildcarded\) address match it can \214nd and deli)86.4 344.2 R
-.165(ve)-.275 G 1.136(rs the data to that).165 F(sock)86.4 357.2 Q(et.)-.11 E
1.127(One problem with wildcarding is that it mak)111.4 373.8 R 1.127
(es caching dif)-.11 F 3.877(\214cult. Consider)-.275 F 1.127(for e)3.877 F
1.128(xample, a)-.165 F 1.485(datagram that arri)86.4 386.8 R -.165(ve)-.275 G
4.235(sa).165 G 1.485(nd matches an address of type \(3\).)190.911 386.8 R(No)
6.985 E 4.235(ws)-.275 G 1.484(uppose that the ne)387.03 386.8 R 1.484(xt arri)
-.165 F(ving)-.275 E .575(datagram w)86.4 399.8 R .576
(ould match both the same type \(3\) address, b)-.11 F .576
(ut also a more complete address of type)-.22 F 3.311(\(1\). If)86.4 412.8 R
.56(the PCB of the \214rst datagram is placed in a cache, the second datagram \
will mak)3.311 F 3.31(eaf)-.11 G(alse)501.295 412.8 Q .182(cache hit.)86.4
425.8 R .182(The cache hit is f)5.682 F .183
(alse because while the second datagram matches the type \(3\) address,)-.11 F
.853(it should be deli)86.4 438.8 R -.165(ve)-.275 G .853
(red to the type \(1\) address it matches more completely).165 F 6.353(.W)-.715
G 3.603(ec)434.265 438.8 S .853(all this problem)447.636 438.8 R F2(cac)86.4
451.8 Q .769(he hiding)-.165 F F0 3.519(,b)C .77
(ecause the type \(3\) address in the cache hides the e)155.291 451.8 R .77
(xistence of the preferred type)-.165 F(\(1\) address.)86.4 464.8 Q
(Unfortunately)111.4 481.4 Q 3.018(,w)-.715 G .268(ildcarding is v)186.105
481.4 R .268(ery common in BSD applications.)-.165 F .267(Most UDP serv)5.768 F
.267(ers do not)-.165 F .261(\214x their remote address or local IP address, b)
86.4 494.4 R .262(ut simply accept all inbound UDP datagrams sent to)-.22 F
.769(their reserv)86.4 507.4 R .769(ed UDP port.)-.165 F .769
(By simply binding to the local port, b)6.269 F .768
(ut not an address, the serv)-.22 F .768(ers on)-.165 F 2.622(multi-homed syst\
ems \(systems with more than one IP address\) are able to serv)86.4 520.4 R
5.372(ed)-.165 G(atagrams)478.69 520.4 Q(re)86.4 533.4 Q -.055(ga)-.165 G .332
(rdless of the interf).055 F .332(ace the)-.11 F 3.082(ya)-.165 G(rri)230.818
533.4 Q -.165(ve)-.275 G 3.082(do).165 G 3.082(n. The)265.228 533.4 R .332
(Reno cache will not cache wildcard addresses \(to)3.082 F -.22(avo)86.4 546.4
S .001(id cache hiding\) and therefore f).22 F .001(ails to ha)-.11 F .331
-.165(ve a)-.22 H 2.751(ne).165 G -.275(ff)310.6 546.4 S .002
(ect on most applications \(including our tests\).).275 F 3.223 -.88(We e)111.4
563 T 1.463(nhanced the Reno cache code to allo).88 F 4.213(wt)-.275 G 1.463
(he cache to contain wildcard addresses.)319.278 563 R -.88(To)6.963 G(solv)
86.4 576 Q 3.336(et)-.165 G .586
(he problem of cache hiding, the routines that add and remo)115.85 576 R .916
-.165(ve a)-.165 H .587(ddresses from a PCB were).165 F 1.161(modi\214ed to de\
tect potential cases of cache hiding and to mark as uncacheable those PCBs tha\
t)86.4 589 R(could cause cache hiding.)86.4 602 Q F1 2.75(6.3.2. Mogul')86.4
628 R 2.75(sS)-.407 G(uggestion: Caching the Sender')163.609 628 Q 2.75(sP)
-.407 G(CB)323.923 628 Q F0 .276
(Mogul [8] has recently done a study of the locality of netw)111.4 644.6 R .276
(ork traf)-.11 F .277(\214c that sho)-.275 F .277(ws that half of)-.275 F .564
(all UDP datagrams recei)86.4 657.6 R -.165(ve)-.275 G 3.314(da).165 G .564
(re replies to the last UDP datagram sent.)219.567 657.6 R .563
(This suggests that a one-)6.063 F(behind cache of the)86.4 670.6 Q F2(sending)
2.75 E F0(PCB might ha)2.75 E .33 -.165(ve a)-.22 H 2.75(ne).165 G -.275(ff)
305.069 670.6 S(ect.).275 E .36 LW 90.9 696 86.4 696 DL 95.4 696 90.9 696 DL
99.9 696 95.4 696 DL 104.4 696 99.9 696 DL 108.9 696 104.4 696 DL 113.4 696
108.9 696 DL 117.9 696 113.4 696 DL 122.4 696 117.9 696 DL 126.9 696 122.4 696
DL 131.4 696 126.9 696 DL 135.9 696 131.4 696 DL 140.4 696 135.9 696 DL 144.9
696 140.4 696 DL 149.4 696 144.9 696 DL 153.9 696 149.4 696 DL 158.4 696 153.9
696 DL/F3 9/Times-Roman@0 SF(code, so only this code is measured \()86.4 707 Q
/F4 9/Helvetica@0 SF(splnet)A F3(,)A F4(spl3)2.25 E F3(and)2.25 E F4(splx)2.25
E F3(called by UDP output routines\).)2.25 E F0(From)181.796 769 Q F2(IEEE/A)
2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0
(\(August 1993\))2.75 E EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-11-)293.237 49 Q 1.478(As with the one-behind recei)
111.4 85 R 1.478(ving cache, wildcarding is a concern, b)-.275 F 1.479
(ut the same marking)-.22 F(algorithm w)86.4 98 Q 2.75(orks. Sending)-.11 F
(PCBs that w)2.75 E(ould cause)-.11 E/F1 11/Times-Italic@0 SF(cac)2.75 E
(he hiding)-.165 E F0(are not cached.)2.75 E/F2 11/Times-Bold@0 SF 2.75
(6.3.3. SUN)86.4 124 R(Caching and W)2.75 E(ildcards)-.198 E F0 .036
(SUN OS 4.1.1 turned out to ha)111.4 140.6 R .365 -.165(ve a b)-.22 H(rok).165
E .035(en one-behind cache of recei)-.11 F .035(ving PCBs which could)-.275 F
1.22(cause data to be misdeli)86.4 153.6 R -.165(ve)-.275 G 1.22
(red to the wrong application, due to a f).165 F 1.22
(ailure to detect cache hiding.)-.11 F 1.76 -.88(We r)86.4 166.6 T
(eplaced the SUN cache code with ours.).88 E F2 2.75(6.3.4. Caching)86.4 192.6
R(Impr)2.75 E -.11(ove)-.198 G(ments).11 E F0 -.77(Te)111.4 209.2 S 2.56
(sting the ef).77 F 2.56(fects of the caching impro)-.275 F -.165(ve)-.165 G
2.56(ments w).165 F 2.56(as dif)-.11 F 5.309(\214cult. Running)-.275 F 2.559
(the tests on a)5.309 F -.814(``)86.4 222.2 S(quiet').814 E 3.739('m)-.814 G
.989(achine \(a machine recei)133.721 222.2 R .99(ving no traf)-.275 F .99
(\214c other than our tests\) w)-.275 F .99(ould gi)-.11 F 1.32 -.165(ve r)
-.275 H(eproduceable).165 E 2.982(results. But)86.4 235.2 R 2.982(aq)2.982 G
.232(uiet machine w)155.846 235.2 R .232(ould not gi)-.11 F .562 -.165(ve m)
-.275 H .231(uch indication of ho).165 F 2.981(war)-.275 G .231(eal w)404.198
235.2 R .231(orkload w)-.11 F .231(ould inter)-.11 F(-)-.22 E .113
(act with the caching algorithms.)86.4 248.2 R .114(Running on an acti)5.614 F
.444 -.165(ve m)-.275 H .114(achine, ho).165 F(we)-.275 E -.165(ve)-.275 G .994
-.44(r, m).165 H .114(eant the results might).44 F(not be reproduceable.)86.4
261.2 Q .868(In the end we compromised.)111.4 277.8 R .868
(The 386 test machine w)6.368 F .867(as already an isolated machine, so it)-.11
F -.11(wa)86.4 290.8 S 3.955(st).11 G 1.205
(ested using the standard program sending 200,000 datagrams.)110.408 290.8 R
1.206(These results are sho)6.706 F 1.206(wn in)-.275 F -.88(Ta)86.4 303.8 S
(ble 4a.).88 E .44 LW 518.4 315.05 86.4 315.05 DL F2 -1.012(Ta)222.221 325.3 S
(ble 4a \255 Impr)1.012 E -.11(ove)-.198 G 2.75(dC).11 G(aches \(386\))330.34
325.3 Q 89.237(64-byte 512-byte)311.234 338.3 R(Code Section)95.584 351.3 Q
-.198(Ti)277.895 351.3 S 25.055(me %).198 F(of T)2.75 E 25.055(otal T)-1.012 F
25.055(ime %)-.198 F(of T)2.75 E(otal)-1.012 E 518.4 356.05 86.4 356.05 DL/F3
11/Helvetica@0 SF(udp_input)95.584 366.3 Q F0 106.862(\(old\) 32.29)2.75 F 38.2
(3.4% 34.99 3.4%)343.342 366.3 R F3(udp_input)95.584 379.3 Q F0(\(ne)2.75 E
102.869(w\) 24.03)-.275 F 38.2(2.7% 23.63 2.4%)343.342 379.3 R 518.4 384.05
86.4 384.05 DL -.88(To)95.584 394.3 S(tal UDP/IP/Sock).88 E(et Impro)-.11 E
-.165(ve)-.165 G 30.302(ment 8.26).165 F 38.2(4.8% 11.36 4.7%)343.342 394.3 R
518.4 399.05 86.4 399.05 DL 445.731 356.05 445.731 399.05 DL 393.429 328.05
393.429 399.05 DL 316.168 356.05 316.168 399.05 DL 263.866 328.05 263.866
399.05 DL 518.4 315.05 518.4 399.05 DL 86.4 315.05 86.4 399.05 DL 1.622
(It should be noted that these results are probably still misleading, for tw)
86.4 416.9 R 4.371(oc)-.11 G 1.621(on\215icting reasons.)436.116 416.9 R .206
(First, the simple test application achie)86.4 429.9 R -.165(ve)-.275 G 2.957
(da1).165 G .207(00% cache hit rate.)285.999 429.9 R .207
(Second the test system w)5.707 F .207(as run-)-.11 F .167
(ning a minimum of user applications, so the UDP PCB cache w)86.4 442.9 R .167
(as some)-.11 F .167(what smaller than normal.)-.275 F(Fe)86.4 455.9 Q .507
(wer applications mak)-.275 F .507(es a normal PCB lookup less e)-.11 F(xpensi)
-.165 E .837 -.165(ve a)-.275 H .508(nd tends to understate the bene-).165 F
(\214ts of caching.)86.4 468.9 Q 1.214(In the second test, the caching code w)
111.4 485.5 R 1.213(as run on a SUN w)-.11 F 1.213(orkstation that serv)-.11 F
1.213(ed both as a)-.165 F 1.274(client and a \214le serv)86.4 498.5 R 1.275
(er and pro\214led the code with the original SUN cache, the impro)-.165 F
-.165(ve)-.165 G 4.025(dc).165 G(ache)498.248 498.5 Q 1.342
(code and with the cache turned of)86.4 511.5 R 4.091(f. By)-.275 F 1.341
(picking a w)4.091 F 1.341(orkstation that did some w)-.11 F 1.341
(ork as both \214le)-.11 F(serv)86.4 524.5 Q .603
(er and client we hoped to get a reasonable mix of traf)-.165 F 3.354
(\214c. Furthermore,)-.275 F .604(the SUN had a more)3.354 F .995
(normal number of acti)86.4 537.5 R 1.324 -.165(ve U)-.275 H .994
(DP applications: between 60 and 65 UDP sock).165 F .994(ets open at an)-.11 F
3.744(yg)-.165 G -2.365 -.275(iv e)499.898 537.5 T(n).275 E 4.617(time. Each)
86.4 550.5 R 1.868(test lasted for about 2-1/2 hours on a normal b)4.617 F
1.868(usiness day during which roughly)-.22 F 1.482
(100,000 UDP datagrams were recei)86.4 563.5 R -.165(ve)-.275 G 4.232(d. The)
.165 F 1.482(results of these tests are sho)4.232 F 1.482(wn in T)-.275 F 1.481
(able 4b)-.88 F 6.981(.A)-.44 G(ll)512.284 563.5 Q(time v)86.4 576.5 Q
(alues ha)-.275 E .33 -.165(ve b)-.22 H(een normalized to 100,000 pack).165 E
(ets so the)-.11 E 2.75(ya)-.165 G(re comparable.)362.555 576.5 Q 518.393
587.75 86.4 587.75 DL F2 -1.012(Ta)190.235 598 S(ble 4b \255 Impr)1.012 E -.11
(ove)-.198 G 2.75(dC).11 G(aches with T)298.97 598 Q(raf\214c \(SUN\))-.814 E
37.621(no-cache SUN)283.669 611 R 37.621(cache new)2.75 F(cache)2.75 E 518.393
615.75 86.4 615.75 DL F0 -.385(Ti)99.857 626 S(me in).385 E F3(udp_input)2.75 E
F0 59.154(17.44 14.16)292.067 626 R(11.37)468.581 626 Q F3(udp_input)99.857 639
Q F0(without sock)2.75 E(et code)-.11 E/F4 9/Times-Roman@0 SF(6)-3.6 I F0
64.654(8.82 5.07)294.817 639 R(3.44)471.331 639 Q 2.75(%o)99.857 652 S 2.75(fh)
117.27 652 S(its in recei)129.183 652 Q -.165(ve)-.275 G 2.75(rc).165 G 77.541
(ache N)196.25 652 R 68.822(A5)-.385 G 66.947(9% 57%)386.514 652 R 2.75(%o)
99.857 665 S 2.75(fh)117.27 665 S(its in sender cache)129.183 665 Q 69.174
-.385(NA NA)296.693 665 T(30%)470.874 665 Q 518.393 669.75 86.4 669.75 DL
436.79 600.75 436.79 669.75 DL 345.401 600.75 345.401 669.75 DL 263.483 600.75
263.483 669.75 DL 518.393 587.75 518.393 669.75 DL 86.4 587.75 86.4 669.75 DL
.36 LW 90.9 695 86.4 695 DL 95.4 695 90.9 695 DL 99.9 695 95.4 695 DL 104.4 695
99.9 695 DL 108.9 695 104.4 695 DL 113.4 695 108.9 695 DL 117.9 695 113.4 695
DL 122.4 695 117.9 695 DL 126.9 695 122.4 695 DL 131.4 695 126.9 695 DL 135.9
695 131.4 695 DL 140.4 695 135.9 695 DL 144.9 695 140.4 695 DL 149.4 695 144.9
695 DL 153.9 695 149.4 695 DL 158.4 695 153.9 695 DL/F5 7/Times-Roman@0 SF(6)
96.4 705 Q F4(In other w)4.5 2.8 M(ords,)-.09 E/F6 9/Helvetica@0 SF(udp_input)
2.25 E F4(without the calls to the sock)2.25 E(et layer b)-.09 E(uf)-.18 E
(fering routines.)-.225 E F0(From)181.796 769 Q F1(IEEE/A)2.75 E(CM T)-.33 E
-.165(ra)-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-12-)293.237 49 Q .365(The most important observ)86.4
85 R .366
(ations on the SUN are that caching is clearly bene\214cial and the sender)
-.275 F .009(cache pays of)86.4 98 R 2.759(fs)-.275 G(plendidly)156.706 98 Q
2.759(,i)-.715 G(mpro)206.116 98 Q .008
(ving performance by about 50% more than just the recei)-.165 F -.165(ve)-.275
G 2.758(rc).165 G(ache)498.248 98 Q 2.781(alone. \(Recall)86.4 111 R .031
(that the SUN cache scheme suf)2.781 F .031
(fers from cache hiding and can mis-deli)-.275 F -.165(ve)-.275 G 2.782(rd).165
G .032(ata; we)486.908 111 R .003(include it to illustrate the ef)86.4 124 R
.003(fects of recei)-.275 F -.165(ve)-.275 G -.22(r-).165 G .003
(only caching\).).22 F 2.753(At)5.503 G .002
(horough analysis of these issues by)363.487 124 R(McK)86.4 137 Q(enne)-.275 E
3.031(ya)-.165 G .281(nd Do)142.748 137 R .611 -.165(ve [)-.165 H .281
(9] has sho).165 F .281(wn that e)-.275 F -.165(ve)-.275 G 3.031(nu).165 G .281
(nder demanding traf)296.724 137 R .281(\214c loads, this caching scheme)-.275
F .244(performs well. \(McK)86.4 150 R(enne)-.275 E 2.994(ya)-.165 G .244
(nd Do)213.764 150 R .574 -.165(ve a)-.165 H .243
(lso identi\214ed a more sophisticated algorithm that performs).165 F
(better under high loads with lo)86.4 163 Q 2.75(wl)-.275 G(ocality\).)234.614
163 Q/F1 11/Times-Bold@0 SF 2.75(6.3.5. Other)86.4 189 R -.22(Po)2.75 G
(tential Cache-Related Impr).22 E -.11(ove)-.198 G(ments).11 E F0 .339
(The cache hit rates on the sender and recei)111.4 205.6 R -.165(ve)-.275 G
3.089(rc).165 G .339(aches were so high that we decided that try-)322.626 205.6
R 1.396(ing to optimize the PCB lookup code further w)86.4 218.6 R 1.396
(as not fruitful.)-.11 F(Ho)6.896 E(we)-.275 E -.165(ve)-.275 G 2.276 -.44
(r, w).165 H 4.146(eh).44 G 1.396(ad prepared tw)444.856 218.6 R(o)-.11 E .184
(additional optimizations and we discuss those optimizations here on the groun\
ds that the)86.4 231.6 R 2.935(ym)-.165 G .185(ay be)494.697 231.6 R
(interesting in other situations.)86.4 244.6 Q 1.493
(First, the original PCB lookup routine is rather inef)111.4 261.2 R 4.243
(\214cient. It)-.275 F 1.493(scans a link)4.243 F 1.493(ed list of UDP)-.11 F
.681(PCBs looking for a PCB that e)86.4 274.2 R .682
(xactly matches the incoming datagram \(on both source and desti-)-.165 F 1.141
(nation address\).)86.4 287.2 R 1.141(While scanning the list, the routine als\
o notes the best wildcard match for the)6.641 F 3.097(datagram. If)86.4 300.2 R
.347(the routine \214nds an e)3.097 F .347
(xact match, it immediately returns the e)-.165 F .347(xact match.)-.165 F .347
(If the rou-)5.847 F .254(tine f)86.4 313.2 R .254(ails to \214nd an e)-.11 F
.253(xact match after scanning the entire list, it returns the best wildcard m\
atch, if)-.165 F(an)86.4 326.2 Q 4.965 -.715(y. T)-.165 H .785(he inef).715 F
(\214cienc)-.275 E 3.535(yc)-.165 G .785(omes in ha)190.989 326.2 R .786
(ving to scan the entire list before returning a wildcard.)-.22 F .786(In the)
6.286 F .499(original 4.3BSD code, the lookup routine had to check e)86.4 339.2
R -.165(ve)-.275 G .498(ry PCB before returning a wildcard to).165 F 1.186
(protect ag)86.4 352.2 R 1.186(ainst cache hiding.)-.055 F 1.186
(But in our code, wildcard PCBs that may cause cache hiding are)6.686 F(mark)
86.4 365.2 Q 4.494(ed. Thus)-.11 F 1.744
(if a wildcard that does not hide another PCB is found, the lookup routine can)
4.494 F 2.784(return the wildcard match immediately)86.4 378.2 R 8.285(.S)-.715
G 2.785(ince most applications use wildcarded PCBs, this)285.056 378.2 R .373
(enhancement should shorten the a)86.4 391.2 R -.165(ve)-.22 G .373
(rage PCB search time by roughly 50% \(half the length of the).165 F
(search list\).)86.4 404.2 Q 3.154
(Another optimization \(suggested to us by Gary Delp of IBM\) is to mo)111.4
420.8 R 3.485 -.165(ve f)-.165 H(requently).165 E 1.272
(accessed PCBs to the front of the PCB list.)86.4 433.8 R 1.272
(An easy implementation of this idea is to mo)6.772 F 1.602 -.165(ve a)-.165 H
.5(PCB to the front of the PCB list whene)86.4 446.8 R -.165(ve)-.275 G 3.251
(ri).165 G 3.251(ti)282.049 446.8 S 3.251(sa)291.416 446.8 S 3.251
(ccessed. The)303.83 446.8 R .501(PCB list is doubly link)3.251 F .501
(ed so mo)-.11 F(v-)-.165 E .792
(ing is an easy operation and the algorithm will tend to cluster hea)86.4 459.8
R .792(vily used PCBs at the front of)-.22 F .168(the list.)86.4 472.8 R
(Observ)5.668 E 2.918(et)-.165 G .168(hat this algorithm w)167.094 472.8 R .168
(orks best if the PCB lookup routine has already been modi-)-.11 F 1.628(\214e\
d to immediately return a wildcarded PCB that does not cause cache hiding.)86.4
485.8 R 1.627(The e)7.127 F(xpected)-.165 E .807(result of this optimization w)
86.4 498.8 R .807(ould be to shorten the a)-.11 F -.165(ve)-.22 G .808
(rage PCB search time to just tw).165 F 3.558(oo)-.11 G 3.558(rt)489.19 498.8 S
(hree)499.469 498.8 Q(comparisons.)86.4 511.8 Q F1 2.75(6.4. Impr)86.4 537.8 R
-.11(ov)-.198 G(ing Sendit P).11 E(erf)-.22 E(ormance)-.275 E F0 .385(Recall t\
hat the 386 processor spent a majority of its time in the routines to manage c\
hanges)111.4 554.4 R .536(of processor priority)86.4 567.4 R 6.036(.T)-.715 G
.536(his observ)192.079 567.4 R .536(ation led us to try to \214nd w)-.275 F
.537(ays to reduce the calls to these rou-)-.11 F 3.153(tines. The)86.4 580.4 R
.403(goal w)3.153 F .403(as to \214nd impro)-.11 F -.165(ve)-.165 G .402
(ments that w).165 F .402(ould signi\214cantly help the 386 and also impro)-.11
F -.165(ve)-.165 G(performance \(though perhaps only a little\) on the Sparc.)
86.4 593.4 Q .349(The BSD netw)111.4 610 R .349
(orking code changes \(or at least, checks\) the process priority quite a bit.)
-.11 F -.165(Fo)5.85 G(r).165 E -.165(ex)86.4 623 S .368(ample, when a pack)
.165 F .367(et arri)-.11 F -.165(ve)-.275 G .367
(s, the processor priority must change at least \214v).165 F 3.117(et)-.165 G
.367(imes before data)444.967 623 R(reaches the user:)86.4 636 Q 9.424
(\(1\) First,)111.4 652.6 R 1.321(the netw)4.071 F 1.321(ork interf)-.11 F
1.321(ace must interrupt and after reading the pack)-.11 F 1.322(et, the netw)
-.11 F(ork)-.11 E(dri)136.4 665.6 Q -.165(ve)-.275 G 2.75(rr).165 G
(outine schedules a softw)168.641 665.6 Q(are interrupt at a lo)-.11 E
(wer priority for)-.275 E/F2 11/Helvetica@0 SF(ipintr)2.75 E F0(;)A(\(2\))111.4
682.2 Q F2(ipintr)136.4 682.2 Q F0 .126(in turn calls the transport le)2.876 F
-.165(ve)-.275 G 2.876(lr).165 G .126
(outine which places the data on the application')303.965 682.2 R(s)-.605 E
(input queue)136.4 695.2 Q .261(\(3-5\) after)111.4 711.8 R F2(ipintr)2.919 E
F0 .17(completes, the processor priority can be reduced to the lo)2.92 F .17
(west le)-.275 F -.165(ve)-.275 G 2.92(la).165 G .17(nd the)491.038 711.8 R
.642(application will try to read the data from the queue.)136.4 724.8 R(Ho)
6.142 E(we)-.275 E -.165(ve)-.275 G 1.522 -.44(r, t).165 H 3.392(op).44 G .642
(rotect ag)437.146 724.8 R .642(ainst race)-.055 F(From)181.796 769 Q/F3 11
/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G
(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-13-)293.237 49 Q .035(conditions in the input queue, \
the processor priority must be raised to the le)136.4 85 R -.165(ve)-.275 G
2.786(lu).165 G .036(sed by)489.951 85 R/F1 11/Helvetica@0 SF(ipintr)136.4 98 Q
F0(while the queue is being manipulated, then reduced ag)2.75 E(ain.)-.055 E
.159(In f)86.4 114.6 R .159(act, there are e)-.11 F -.165(ve)-.275 G 2.909(nm)
.165 G .159(ore priority changes than these, as the netw)193.543 114.6 R .158
(orking code often must brie\215y)-.11 F
(lock out higher priorities while manipulating shared data structures.)86.4
127.6 Q .177(One should observ)111.4 144.2 R 2.927(et)-.165 G .177
(hat the intermediate priority le)204.947 144.2 R -.165(ve)-.275 G 2.928(lf)
.165 G(or)359.064 144.2 Q F1(ipintr)2.928 E F0 .178
(is super\215uous and could be)2.928 F(remo)86.4 157.2 Q -.165(ve)-.165 G 3.603
(d\().165 G .853
(all inbound data could be processed at application priority\).)131.825 157.2 R
.852(This w)6.352 F .852(ould impro)-.11 F 1.182 -.165(ve p)-.165 H(er).165 E
(-)-.22 E .588
(formance of both the input and output code, as the output code w)86.4 170.2 R
.588(ould no longer ha)-.11 F .918 -.165(ve t)-.22 H 3.338(or).165 G .588
(aise its)487.562 170.2 R .637(priority le)86.4 183.2 R -.165(ve)-.275 G 3.387
(lt).165 G 3.387(oa)150.176 183.2 S -.22(vo)163.727 183.2 S .636
(id race conditions with the input code.).22 F/F2 9/Times-Roman@0 SF(7)-3.6 I
F0(Ho)3.386 3.6 M(we)-.275 E -.165(ve)-.275 G 3.386(rt).165 G 3.386(om)400.598
183.2 S(ak)418.042 183.2 Q 3.386(et)-.11 G .636(hat change w)439.644 183.2 R
(ould)-.11 E(ha)86.4 196.2 Q .33 -.165(ve r)-.22 H
(equired us to restructure all the BSD netw).165 E(orking code.)-.11 E 1.76
-.88(We w)111.4 212.8 T(ere, ho).88 E(we)-.275 E -.165(ve)-.275 G .88 -.44
(r, a).165 H(ble to identify a more modest impro).44 E -.165(ve)-.165 G
(ment in the).165 E F1(sendit)2.75 E F0(routine.)2.75 E .712
(When an application calls the)111.4 229.4 R F1(sendto)3.463 E F0 .713
(system call, it passes do)3.463 F .713(wn the address to which the)-.275 F
.429(datagram is to be sent.)86.4 242.4 R F1(Sendit)5.928 E F0 3.178(,i)C 3.178
(nt)232.894 242.4 S .428(urn, allocates a k)244.63 242.4 R .428(ernel memory b)
-.11 F(uf)-.22 E(fer)-.275 E 3.178(,c)-.44 G .428(opies the address into)
422.098 242.4 R 1.729(the memory b)86.4 255.4 R(uf)-.22 E(fer)-.275 E 4.479(,a)
-.44 G 1.729(nd passes the b)183.514 255.4 R(uf)-.22 E 1.729
(fer containing the address to)-.275 F F1(sosend)4.48 E F0(and)4.48 E F1
(udp_usrreq)4.48 E F0(.)A(After the datagram has been sent,)86.4 268.4 Q F1
(sendit)2.75 E F0(frees the memory b)2.75 E(uf)-.22 E(fer)-.275 E(.)-.605 E
1.234(There is a small inef)111.4 285 R(\214cienc)-.275 E 3.984(yi)-.165 G
3.984(nt)247.579 285 S 1.234(his process.)260.121 285 R F1(Sendto)6.734 E F0
1.233(is a frequently-used system call, so)3.983 F F1(sendit)86.4 298 Q F0 .857
(is constantly calling the b)3.607 F(uf)-.22 E .858
(fer management routines to allocate and free a b)-.275 F(uf)-.22 E(fer)-.275 E
6.358(.T)-.605 G(hese)498.853 298 Q 1.414(routines are not v)86.4 311 R 1.414
(ery e)-.165 F(xpensi)-.165 E 1.743 -.165(ve t)-.275 H(hemselv).165 E 1.413
(es, b)-.165 F 1.413(ut the)-.22 F 4.163(yd)-.165 G 4.163(or)334.989 311 S
1.413(equire a change in processor priority)348.315 311 R(,)-.715 E .455
(because memory b)86.4 324 R(uf)-.22 E .456(fers sometimes ha)-.275 F .786
-.165(ve t)-.22 H 3.206(ob).165 G 3.206(ea)289.269 324 S .456(llocated by de)
302.243 324 R .456(vice dri)-.275 F -.165(ve)-.275 G .456
(rs \(which run at a higher).165 F .889(interrupt le)86.4 337 R -.165(ve)-.275
G 3.639(lt).165 G .889(han the netw)155.564 337 R .889(orking code\).)-.11 F
.889(Thus, if we could reduce the calls to the b)6.389 F(uf)-.22 E .888
(fer man-)-.275 F(agement routines, the time spent managing processor priority\
 changes should go do)86.4 350 Q(wn.)-.275 E 1.601(So we changed)111.4 366.6 R
F1(sendit)4.351 E F0 1.601(to try to a)4.351 F -.22(vo)-.22 G 1.602
(id freeing memory b).22 F(uf)-.22 E 4.352(fers. The)-.275 F 1.602(routine k)
4.352 F 1.602(eeps a one)-.11 F .411(pointer cache.)86.4 379.6 R(If)5.911 E F1
(sendit)3.161 E F0 .411(is about to free a memory b)3.161 F(uf)-.22 E(fer)-.275
E 3.16(,i)-.44 G 3.16<748c>350.266 379.6 S .41(rst checks the cache.)362.6
379.6 R .41(If the pointer)5.91 F .532(is null, it sa)86.4 392.6 R -.165(ve)
-.22 G 3.282(st).165 G .532(he memory b)159.346 392.6 R(uf)-.22 E .532
(fer in the cache, otherwise it frees the b)-.275 F(uf)-.22 E(fer)-.275 E 6.033
(.B)-.605 G .533(efore allocating a)440.972 392.6 R .348(memory b)86.4 405.6 R
(uf)-.22 E(fer)-.275 E(,)-.44 E F1(sendit)3.098 E F0 .348
(\214rst checks to see if there is a b)3.098 F(uf)-.22 E .348
(fer in the cache; if so, it uses the cached)-.275 F -.22(bu)86.4 418.6 S -.275
(ff).22 G(er).275 E 6.344(.N)-.605 G .844(ote that this scheme w)129.209 418.6
R .844(orks because the memory b)-.11 F(uf)-.22 E .844
(fers in the BSD system are a \214x)-.275 F(ed)-.165 E(size.)86.4 431.6 Q
(The results for the 386 processor were encouraging and are sho)111.4 448.2 Q
(wn in T)-.275 E(able 5a.)-.88 E .44 LW 518.395 459.45 86.4 459.45 DL/F3 11
/Times-Bold@0 SF -1.012(Ta)223.428 469.7 S(ble 5a \255 Impr)1.012 E -.11(ove)
-.198 G(d).11 E F1(Sendit)2.75 E F3(\(386\))2.75 E 106.706(64-byte 512-byte)
287.645 482.7 R(Code Section)100.822 495.7 Q 53.958(old new old new)260.963
495.7 R 518.395 500.45 86.4 500.45 DL F0(Priority Mgmt/Interrupts)100.822 510.7
Q 40.516(541.30 511.37 550.55 529.25)253.175 510.7 R F1(sendit)100.822 523.7 Q
F0 46.016(53.28 47.76 51.75 53.76)258.675 523.7 R 518.395 528.45 86.4 528.45 DL
518.395 530.45 86.4 530.45 DL 452.09 500.45 452.09 528.45 DL 305.058 500.45
305.058 528.45 DL -.88(To)100.822 540.7 S(tal Impro).88 E -.165(ve)-.165 G
105.082(ment 35.45).165 F(19.31)439.715 540.7 Q 2.75(%I)100.822 553.7 S(mpro)
116.398 553.7 Q -.165(ve)-.165 G 119.178(ment 3.8%).165 F(1.9%)440.633 553.7 Q
518.395 558.45 86.4 558.45 DL 378.574 472.45 378.574 558.45 DL 231.542 472.45
231.542 558.45 DL 518.395 459.45 518.395 558.45 DL 86.4 459.45 86.4 558.45 DL
.756(The 386 impro)86.4 576.3 R -.165(ve)-.165 G .756
(ments represent about a 2% to 4% impro).165 F -.165(ve)-.165 G .755(ment in k)
.165 F .755(ernel performance and the)-.11 F .133
(reduction in time in priority management code for 64-byte pack)86.4 589.3 R
.133(ets is equal to nearly a third of the)-.11 F(time spent in UDP and sock)
86.4 602.3 Q(et code.)-.11 E 2.64 -.88(We e)111.4 618.9 T .88(xpected impro)
.715 F -.165(ve)-.165 G .88(ments on the Sparc to be less notable, lar).165 F
.88(gely because changing pro-)-.198 F .501(cessor priority le)86.4 631.9 R
-.165(ve)-.275 G .502(ls on the Sparc is much cheaper).165 F 6.002(.H)-.605 G
-.275(ow)329.682 631.9 S -2.365 -.275(ev e).275 H 3.252(rt).275 G .502
(he Sparc impro)367.65 631.9 R -.165(ve)-.165 G .502(ments were use-).165 F
3.45(ful. The)86.4 644.9 R .7(results are sho)3.45 F .7(wn in T)-.275 F .7
(able 5b)-.88 F 6.2(.\()-.44 G .7(The Sparc costs for)271.872 644.9 R F1
(sendit)3.449 E F0 .699(include the costs of calls to)3.449 F
(priority routines\).)86.4 657.9 Q .36 LW 90.9 694.2 86.4 694.2 DL 95.4 694.2
90.9 694.2 DL 99.9 694.2 95.4 694.2 DL 104.4 694.2 99.9 694.2 DL 108.9 694.2
104.4 694.2 DL 113.4 694.2 108.9 694.2 DL 117.9 694.2 113.4 694.2 DL 122.4
694.2 117.9 694.2 DL 126.9 694.2 122.4 694.2 DL 131.4 694.2 126.9 694.2 DL
135.9 694.2 131.4 694.2 DL 140.4 694.2 135.9 694.2 DL 144.9 694.2 140.4 694.2
DL 149.4 694.2 144.9 694.2 DL 153.9 694.2 149.4 694.2 DL 158.4 694.2 153.9
694.2 DL/F4 7/Times-Roman@0 SF(7)96.4 704.2 Q F2
(The latest 4.4BSD release will eliminate this priority le)4.5 2.8 M -.135(ve)
-.225 G(l.).135 E F0(From)181.796 769 Q/F5 11/Times-Italic@0 SF(IEEE/A)2.75 E
(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75
E EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-14-)293.237 49 Q .44 LW 518.391 76.75 86.4 76.75 DL/F1
11/Times-Bold@0 SF -1.012(Ta)217.717 87 S(ble 5b \255 Impr)1.012 E -.11(ove)
-.198 G(d).11 E/F2 11/Helvetica@0 SF(Sendit)2.75 E F1(\(Spar)2.75 E(c\))-.198 E
115.872(64-byte 512-byte)275.572 100 R(Code Section)104.183 113 Q 58.541
(old new old new)246.599 113 R 518.391 117.75 86.4 117.75 DL F2(sendit)104.183
128 Q F0 50.599(22.30 19.27 24.26 22.54)241.561 128 R 518.391 132.75 86.4
132.75 DL 518.391 134.75 86.4 134.75 DL 449.183 117.75 449.183 132.75 DL
292.985 117.75 292.985 132.75 DL -.88(To)104.183 145 S(tal Impro).88 E -.165
(ve)-.165 G 92.398(ment 3.03).165 F(1.72)439.558 145 Q 2.75(%I)104.183 158 S
(mpro)119.759 158 Q -.165(ve)-.165 G 103.745(ment 1.6%).165 F(0.8%)437.727 158
Q 518.391 162.75 86.4 162.75 DL 371.084 89.75 371.084 162.75 DL 214.886 89.75
214.886 162.75 DL 518.391 76.75 518.391 162.75 DL 86.4 76.75 86.4 162.75 DL
(The impro)86.4 180.6 Q -.165(ve)-.165 G
(ment is equal to about 1% to 2% of total k).165 E(ernel time.)-.11 E F1 2.75
(7. Reducing)86.4 206.6 R(Data Handling Costs)2.75 E F0 1.661
(After reducing the per)111.4 223.2 R(-pack)-.22 E 1.661(et o)-.11 F -.165(ve)
-.165 G 1.661(rhead, we w).165 F(ork)-.11 E 1.661
(ed on reducing the data handling costs.)-.11 F .288
(The structure of the BSD code lar)86.4 236.2 R .287
(gely dictated that there be tw)-.198 F 3.037(od)-.11 G .287
(ata copies on both transmission)379.147 236.2 R .532
(and receipt of data plus a checksum.)86.4 249.2 R .533(Since neither cop)6.032
F 3.283(yc)-.11 G .533(ould be eliminated without completely)346.384 249.2 R
(re)86.4 262.2 Q .589(writing the BSD code, we focussed on trying to reduce co\
sts by combining the checksum with)-.275 F(one of the cop)86.4 275.2 Q 2.75(yl)
-.11 G(oops.)160.221 275.2 Q F1 2.75(7.1. Combining)86.4 301.2 R
(the Checksum and Copy Loops)2.75 E F0(Ov)111.4 317.8 Q .605(er the past fe)
-.165 F 3.355(wy)-.275 G .605
(ears, there has been much discussion of the possible merits of reducing)
199.521 317.8 R .477(the number of times that the data in a datagram must be s\
canned by reducing the number of data)86.4 330.8 R 1.59(copies between dif)86.4
343.8 R 1.59(ferent memory and b)-.275 F(uf)-.22 E 1.591
(fer spaces and by combining the checksum and data)-.275 F(cop)86.4 356.8 Q
2.75(yl)-.11 G 2.75(oops. \(This)113.482 356.8 R(idea is belie)2.75 E -.165(ve)
-.275 G 2.75(dt).165 G 2.75(oh)242.281 356.8 S -2.475 -.22(av e)256.031 356.8 T
(originated with V)2.97 E(an Jacobson\).)-1.221 E 1.388
(The standard BSD code scans data three times on both input and output.)111.4
373.4 R 1.387(On output, the)6.887 F 1.888(data is copied from user space to k)
86.4 386.4 R 1.888(ernel b)-.11 F(uf)-.22 E 1.888
(fers, checksummed, and then copied from k)-.275 F(ernel)-.11 E -.22(bu)86.4
399.4 S -.275(ff).22 G 1.072(ers to interf).275 F 1.072(ace memory)-.11 F 6.572
(.T)-.715 G 1.072(he same operations are done on input, b)227.44 399.4 R 1.072
(ut in re)-.22 F -.165(ve)-.275 G 1.072(rse order).165 F 6.571(.T)-.605 G(he)
508.016 399.4 Q 1.149(copies between k)86.4 412.4 R 1.149(ernel b)-.11 F(uf)
-.22 E 1.149(fers and interf)-.275 F 1.15
(ace memory are often done with some hardw)-.11 F 1.15(are assist,)-.11 F 1.281
(such as DMA, b)86.4 425.4 R 1.281(ut the copies between user and k)-.22 F 1.28
(ernel space and the checksum are all done in)-.11 F(softw)86.4 438.4 Q 4.7
(are. W)-.11 F 4.701(ec)-.88 G 1.951(hanged the UDP code to do the cop)158.336
438.4 R 4.701(yb)-.11 G 1.951(etween user and k)343.696 438.4 R 1.951
(ernel space and the)-.11 F(checksum in a single loop.)86.4 451.4 Q F1 2.75
(7.1.1. Changes)86.4 477.4 R(to Code)2.75 E F0 .901(Since checksums can be pro\
tocol speci\214c, the code to do copies and checksums had to be)111.4 494 R
.422(done in a protocol speci\214c w)86.4 507 R(ay)-.11 E 5.922(.T)-.715 G .422
(he logical approach, therefore, w)240.247 507 R .422(as to add some ne)-.11 F
3.172(we)-.275 G .422(ntries to)482.228 507 R .298(the protocol switch table.)
86.4 520 R(Initially)5.798 E 3.048(,w)-.715 G 3.048(et)252.164 520 S .297
(ried simply adding protocol speci\214c data cop)263.154 520 R 3.047(yr)-.11 G
.297(outines to)475.016 520 R .201(the protocol switch table b)86.4 533 R .201
(ut this turned out to mak)-.22 F 2.952(et)-.11 G .202
(he already complicated sock)323.35 533 R .202(et routines e)-.11 F -.165(ve)
-.275 G(n).165 E .098(more comple)86.4 546 R(x.)-.165 E/F3 9/Times-Roman@0 SF
(8)-3.6 I F0 .097(Making code more comple)2.848 3.6 N 2.847(xd)-.165 G .097
(id not seem desirable, so we tried another approach)291.871 546 R .948
(and wrote protocol-speci\214c v)86.4 559 R .948(ersions of)-.165 F F2(sosend)
3.698 E F0(and)3.698 E F2(soreceiv)3.698 E(e)-.275 E F0 .949
(and placed them in the protocol)3.698 F(switch table.)86.4 572 Q 2.673
(In this ne)111.4 588.6 R 5.423(wv)-.275 G 2.672
(ersion of the code, when a datagram is sent,)176.113 588.6 R F2(sendit)5.422 E
F0(calls)5.422 E F2(udp_sosend)5.422 E F0(.)A F2(Udp_sosend)86.4 601.6 Q F0
1.34
(does some error checking, then copies and checksums the data from user space,)
4.09 F 1.617(adds the UDP protocol header)86.4 614.6 R 4.367(,a)-.44 G 1.617
(nd calls)237.012 614.6 R F2(ip_output)4.367 E F0 1.617(with the UDP datagram.)
4.367 F 1.616(Thus a chain of)7.117 F 3.16(three procedure calls \()86.4 627.6
R F2(sosend)A F0(,)A F2(udp_usrreq)5.91 E F0(,)A F2(udp_output)5.91 E F0 5.91
(\)w)C 3.161(as reduced to a single call to)374.794 627.6 R .36 LW 90.9 638.6
86.4 638.6 DL 95.4 638.6 90.9 638.6 DL 99.9 638.6 95.4 638.6 DL 104.4 638.6
99.9 638.6 DL 108.9 638.6 104.4 638.6 DL 113.4 638.6 108.9 638.6 DL 117.9 638.6
113.4 638.6 DL 122.4 638.6 117.9 638.6 DL 126.9 638.6 122.4 638.6 DL 131.4
638.6 126.9 638.6 DL 135.9 638.6 131.4 638.6 DL 140.4 638.6 135.9 638.6 DL
144.9 638.6 140.4 638.6 DL 149.4 638.6 144.9 638.6 DL 153.9 638.6 149.4 638.6
DL 158.4 638.6 153.9 638.6 DL/F4 7/Times-Roman@0 SF(8)96.4 648.6 Q F3 .424
(The list of added comple)4.5 2.8 N .424(xities is long and not v)-.135 F .424
(ery edifying.)-.135 F -.135(Fo)4.924 G 2.674(rt).135 G .424
(hose who are curious, here are a tw)348.069 651.4 R(o)-.09 E -.135(ex)86.4
662.4 S 1.612(amples of the problems encountered.).135 F 1.612(First, ha)6.112
F 1.612(ving protocol-speci\214c data cop)-.18 F 3.863(yr)-.09 G 1.613
(outines meant that the)398.316 662.4 R(sock)86.4 673.4 Q .362
(et code had to be recoded to either use the ne)-.09 F 2.611(wc)-.225 G(op)
281.258 673.4 Q 2.611(yr)-.09 G .361(outines, if the)300.276 673.4 R 2.611(ye)
-.135 G .361(xisted, or the old cop)361.083 673.4 R 2.611(yr)-.09 G .361
(outines if)448.289 673.4 R 1.104(there were no protocol speci\214c routines.)
86.4 684.4 R 1.105(So already comple)5.605 F 3.355(xc)-.135 G 1.105
(ode to manage data copies w)322.907 684.4 R 1.105(as made e)-.09 F -.135(ve)
-.225 G(n).135 E .389(harder to read.)86.4 695.4 R .388(Another problem w)4.888
F .388(as communication with lo)-.09 F .388(wer layers.)-.225 F(Ho)4.888 E
2.638(wd)-.225 G .388(oes the sock)378.823 695.4 R .388(et layer pass the)-.09
F .374(partial checksums it computes do)86.4 706.4 R .374
(wn to the UDP layer on output?)-.225 F(Ho)4.874 E 2.624(wd)-.225 G .374
(oes the UDP input routines pass up)353.661 706.4 R
(partial checksum information to sock)86.4 717.4 Q(et routines on input?)-.09 E
F0(From)181.796 769 Q/F5 11/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165
(ra)-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-15-)293.237 49 Q/F1 11/Helvetica@0 SF(udp_sosend)86.4
85 Q F0 5.555(.F)C .055(urthermore, because)160.749 85 R F1(udp_sosend)2.805 E
F0 .055(is protocol-speci\214c, we were able to eliminate)2.805 F 2.75(al)86.4
98 S(ot of unnecessary tests and reduce the number of critical re)97.092 98 Q
(gions that had to be protected.)-.165 E .426(On the recei)111.4 114.6 R .426
(ving side, the code is a bit more comple)-.275 F(x.)-.165 E F1(Udp_input)3.176
E F0 -.11(wa)3.176 G 3.176(sc).11 G .426(hanged to compute)433.837 114.6 R .556
(the checksum on the UDP header \(b)86.4 127.6 R .556
(ut not the UDP data\) and then remo)-.22 F .885 -.165(ve t)-.165 H .555
(he UDP header from).165 F .491(the datagram.)86.4 140.6 R .491(The remainder \
of the datagram, along with the partial checksum and the length of)5.991 F .692
(the UDP datagram are then passed to)86.4 153.6 R F1(sbappendaddr)3.441 E F0
3.441(,w)C .691(hich queues the datagram to be read by)341.578 153.6 R .34
(the application.)86.4 166.6 R .34(When the application does the read,)5.84 F
F1(recvit)3.09 E F0 .34(calls a UDP-speci\214c v)3.09 F .34(ersion of)-.165 F
F1(sore-)3.09 E(ceiv)86.4 179.6 Q(e)-.275 E F0 3.419(,w)C .669
(hich checksums the data while cop)125.91 179.6 R .668
(ying the data into application memory)-.11 F 6.168(.I)-.715 G 3.418(ft)465.144
179.6 S .668(he check-)475.283 179.6 R .463
(sum is correct, then the read completes.)86.4 192.6 R .464(If the checksum f)
5.964 F .464(ails, one of tw)-.11 F 3.214(ot)-.11 G .464(hings happens.)422.606
192.6 R .464(If the)5.964 F .659
(application is not non-blocking, the read routine simply w)86.4 205.6 R .659
(aits for the ne)-.11 F .659(xt datagram to arri)-.165 F -.165(ve)-.275 G 6.159
(.I).165 G(f)514.737 205.6 Q .525(the application is non-blocking, and there a\
re no additional datagrams immediately w)86.4 218.6 R .526(aiting to be)-.11 F
(processed, the routine returns an error indicating the read w)86.4 231.6 Q
(ould block \()-.11 E F1(EW)A(OULDBLOCK)-.22 E F0(\).)A(Observ)111.4 248.2 Q
5.095(et)-.165 G 2.345(hat this ne)156.04 248.2 R 5.095(wv)-.275 G 2.345
(ersion of the recei)224.048 248.2 R 2.344(ving code implies tw)-.275 F 5.094
(om)-.11 G 2.344(inor changes to the)427.966 248.2 R .335
(semantics of reading from a sock)86.4 261.2 R 3.085(et. First,)-.11 F 3.085
(an)3.085 G .336(on-blocking application which learns from a)289.687 261.2 R F1
(select)3.086 E F0 .873(call that data is w)86.4 274.2 R .872
(aiting to be read may get an une)-.11 F .872(xpected error \()-.165 F F1(EW)A
(OULDBLOCK)-.22 E F0 3.622(\)i)C 3.622(ft)475.725 274.2 S .872(he data)486.068
274.2 R -.11(fa)86.4 287.2 S .621(ils to checksum.).11 F .622
(Second, because the checksum can only be con\214rmed after the data has been)
6.121 F(copied, an application')86.4 300.2 Q 2.75(sb)-.605 G(uf)198.611 300.2 Q
(fers will be changed e)-.275 E -.165(ve)-.275 G 2.75(ni).165 G 2.75(ft)325.276
300.2 S(he read call f)334.747 300.2 Q(ails.)-.11 E .221(The k)111.4 316.8 R
.551 -.165(ey p)-.11 H .221
(iece of code that both copies and checksums the data w).165 F .22
(as written in assembler for)-.11 F .061(both the 386 and Sparc systems.)86.4
329.8 R .062(\(The authors w)5.562 F .062(ould lik)-.11 F 2.812(et)-.11 G 2.812
(ot)345.273 329.8 S .062(hank V)356.643 329.8 R .062(an Jacobson for pro)-1.221
F .062(viding the)-.165 F(assembly code for the Sparc\).)86.4 342.8 Q/F2 11
/Times-Bold@0 SF 2.75(7.1.2. P)86.4 368.8 R(erf)-.22 E(ormance Impr)-.275 E
-.11(ove)-.198 G(ments).11 E F0 .115(Combining the cop)111.4 385.4 R 2.865(ya)
-.11 G .115(nd checksum loops required e)209.106 385.4 R(xtensi)-.165 E .444
-.165(ve c)-.275 H .114(hanges to the UDP implemen-).165 F 3.276(tation. In)
86.4 398.4 R .526(addition to combining the tw)3.276 F 3.276(ol)-.11 G .526
(oops, calling paths ha)273.617 398.4 R .857 -.165(ve b)-.22 H .527
(een changed, and old code is).165 F 1.069(often e)86.4 411.4 R -.165(xe)-.165
G 1.069(cuted in ne).165 F 3.819(wp)-.275 G 1.068(laces and at dif)195.154
411.4 R 1.068(ferent priority le)-.275 F -.165(ve)-.275 G 3.818(ls. As).165 F
3.818(ar)3.818 G 1.068(esult, direct comparisons of)393.602 411.4 R(old and ne)
86.4 424.4 Q 2.75(wc)-.275 G(ode are some)147.527 424.4 Q(what dif)-.275 E 2.75
(\214cult. Ho)-.275 F(we)-.275 E -.165(ve)-.275 G .88 -.44(r, t).165 H
(here were dramatic impro).44 E -.165(ve)-.165 G(ments.).165 E .776(The ef)
111.4 441 R .776(fect of combining the checksum and cop)-.275 F 3.526(yl)-.11 G
.777(oops is to reduce three memory accesses)335.342 441 R .004(to tw)86.4 454
R 2.754(o. The)-.11 F(cop)2.754 E 2.754(yl)-.11 G .004
(oop had one read and one write for each w)169.301 454 R .003
(ord of data, and the checksum had to)-.11 F .073(read the data ag)86.4 467 R
.073(ain, for a total of three accesses.)-.055 F .073
(The combined loop reads each w)5.573 F .074(ord into a re)-.11 F(gis-)-.165 E
(ter)86.4 480 Q 3.676(,a)-.44 G .926(dds the w)108.875 480 R .925
(ord to the running checksum, and then writes the w)-.11 F .925(ord, thus gi)
-.11 F .925(ving tw)-.275 F 3.675(oa)-.11 G(ccesses)486.027 480 Q
(plus an addition.)86.4 493 Q(Intuiti)5.5 E -.165(ve)-.275 G(ly).165 E 2.75(,o)
-.715 G(ne w)220.611 493 Q(ould look for about a one third impro)-.11 E -.165
(ve)-.165 G(ment in speed.).165 E .418(In f)111.4 509.6 R .418(act, the impro)
-.11 F -.165(ve)-.165 G .418(ment w).165 F .419
(as substantially more, as can be seen in T)-.11 F .419(ables 6a and 6b, which)
-.88 F .77(compare the time spent in the checksum and cop)86.4 522.6 R 3.52(yr)
-.11 G .769(outines before and after the changes.)318.984 522.6 R/F3 9
/Times-Roman@0 SF(9)-3.6 I F0(These)3.519 3.6 M(results are sho)86.4 535.6 Q
(wn in T)-.275 E(ables 6a and 6b)-.88 E(.)-.44 E .44 LW 518.387 546.85 86.4
546.85 DL F2 -1.012(Ta)191.365 557.1 S
(ble 6a: Combined Checksum and Copy \(386\))1.012 E(data size)105.679 570.1 Q
(bef)199.345 570.1 Q(or)-.275 E 53.191(ea)-.198 G 50.045(fter impr)287.494
570.1 R -.11(ove)-.198 G 57.673(ment %).11 F 518.387 574.85 86.4 574.85 DL F0
(64 bytes)107.511 585.1 Q 48.967(51.57 27.56)204.449 585.1 R 67.849
(24.01 46.6%)376.264 585.1 R(512 bytes)104.761 598.1 Q 48.967(108.59 65.57)
198.949 598.1 R 67.849(43.02 39.6%)376.264 598.1 R 518.387 602.85 86.4 602.85
DL 445.754 559.85 445.754 602.85 DL 331.524 559.85 331.524 602.85 DL 255.057
559.85 255.057 602.85 DL 173.09 559.85 173.09 602.85 DL 518.387 546.85 518.387
602.85 DL 86.4 546.85 86.4 602.85 DL .36 LW 90.9 672.2 86.4 672.2 DL 95.4 672.2
90.9 672.2 DL 99.9 672.2 95.4 672.2 DL 104.4 672.2 99.9 672.2 DL 108.9 672.2
104.4 672.2 DL 113.4 672.2 108.9 672.2 DL 117.9 672.2 113.4 672.2 DL 122.4
672.2 117.9 672.2 DL 126.9 672.2 122.4 672.2 DL 131.4 672.2 126.9 672.2 DL
135.9 672.2 131.4 672.2 DL 140.4 672.2 135.9 672.2 DL 144.9 672.2 140.4 672.2
DL 149.4 672.2 144.9 672.2 DL 153.9 672.2 149.4 672.2 DL 158.4 672.2 153.9
672.2 DL/F4 7/Times-Roman@0 SF(9)96.4 682.2 Q F3 .694(The `)4.5 2.8 N(`before')
-.666 E 2.944('n)-.666 G .694(umbers are the costs of calling both)162.425 685
R/F5 9/Helvetica@0 SF(uiomo)2.944 E -.225(ve)-.135 G F3 .693(\(the cop)3.168 F
2.943(yr)-.09 G .693(outine\) and)374.391 685 R F5(in_c)2.943 E(ksum)-.18 E F3
5.193(.T)C(he)469.539 685 Q(y)-.135 E .438(are from a pro\214le tak)86.4 696 R
.438(en after the ip header checksum code w)-.09 F .438(as optimized. The `)
-.09 F(`after')-.666 E 2.688('n)-.666 G .438(umbers are the cost)411.354 696 R
(of calling)86.4 707 Q F5(in_uiomo)2.25 E -.225(ve)-.135 G F3(which both mo)
2.475 E -.135(ve)-.135 G 2.25(sa).135 G(nd checksums in one loop.)242.775 707 Q
F0(From)181.796 769 Q/F6 11/Times-Italic@0 SF(IEEE/A)2.75 E(CM T)-.33 E -.165
(ra)-.605 G(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-16-)293.237 49 Q .44 LW 518.392 76.75 86.4 76.75 DL/F1
11/Times-Bold@0 SF -1.012(Ta)185.658 87 S
(ble 6b: Combined Checksum and Copy \(Spar)1.012 E(c\))-.198 E(data size)
105.566 100 Q(bef)198.712 100 Q(or)-.275 E 52.512(ea)-.198 G 49.762(fter impr)
286.182 100 R -.11(ove)-.198 G 58.468(ment %).11 F 518.392 104.75 86.4 104.75
DL F0 66.933(64 12.40)120.383 115 R 75.815(4.40 8.00)282.354 115 R(64.5%)
470.813 115 Q 64.183(512 20.20)117.633 128 R 75.815(5.0 15.2)282.354 128 R
(75.2%)470.813 128 Q 518.392 132.75 86.4 132.75 DL 444.557 89.75 444.557 132.75
DL 329.532 89.75 329.532 132.75 DL 254.426 89.75 254.426 132.75 DL 172.456
89.75 172.456 132.75 DL 518.392 76.75 518.392 132.75 DL 86.4 76.75 86.4 132.75
DL -.165(Fo)111.4 150.6 S 4.562(rb).165 G 1.812
(oth 386 and the Sparc, tests of the cop)136.576 150.6 R 1.813
(y-checksum routines suggest that, for some)-.11 F 1.033
(inputs, the combined routines are f)86.4 163.6 R 1.033
(aster than the original cop)-.11 F 3.783(yr)-.11 G 1.033(outines the)375.437
163.6 R 3.783(yr)-.165 G 3.783(eplaced! The)437.222 163.6 R(386)3.783 E .013
(code w)86.4 176.6 R .013(as written by the authors and w)-.11 F .013
(as carefully designed to \214t inside the small cache of the 386)-.11 F .054
(processor we were using.)86.4 189.6 R(\(T)5.554 E .053
(ests of the same code with other processors with dif)-.77 F .053
(ferent cache sizes)-.275 F -.055(ga)86.4 202.6 S .9 -.165(ve s)-.165 H .57
(maller performance impro).165 F -.165(ve)-.165 G 3.321(ments\). The).165 F
.571(Sparc code pro)3.321 F .571(vided V)-.165 F .571(an Jacobson w)-1.221 F
.571(as modi\214ed)-.11 F .331(by the authors to \214t into the k)86.4 215.6 R
3.081(ernel. These)-.11 F .33(modi\214cations made Jacobson')3.08 F 3.08(sr)
-.605 G .33(outine slightly slo)422.678 215.6 R(wer)-.275 E -.22(bu)86.4 228.6
S 2.75(ts).22 G(till substantially f)107.267 228.6 Q(aster than the e)-.11 E
(xisting cop)-.165 E 2.75(yc)-.11 G(ode in the Sparc.)311.9 228.6 Q F1 2.75
(8. Summary)86.4 254.6 R(of Impr)2.75 E -.11(ove)-.198 G(ments).11 E F0 .2
(The incremental discussions of impro)111.4 271.2 R -.165(ve)-.165 G .2
(ments abo).165 F .53 -.165(ve m)-.165 H .201(ay mak).165 F 2.951(ei)-.11 G
2.951(td)397.583 271.2 S(if)409.092 271.2 Q .201(\214cult to assess the total)
-.275 F .432(performance impro)86.4 284.2 R -.165(ve)-.165 G 3.182(ment. This)
.165 F .432(section summarizes the impro)3.182 F -.165(ve)-.165 G .432
(ments and discusses the signi\214-).165 F(cance of the results.)86.4 297.2 Q
F1 2.75(8.1. Ov)86.4 323.2 R(erall Impr)-.11 E -.11(ove)-.198 G(ments).11 E F0
-.88(Ta)111.4 339.8 S .767(bles 7a and 7b compares the total impro).88 F -.165
(ve)-.165 G .768(ment between the intial \(unoptimized\) system).165 F .656
(and the \214nal \(most optimized\) system.)86.4 352.8 R .656
(In addition to the re)6.156 F .656(gular data sizes of 64 and 512 bytes,)-.165
F .345(the sizes of 59 and 509 were tested to sho)86.4 365.8 R 3.096(wt)-.275 G
.346(hat the performance impro)286.325 365.8 R -.165(ve)-.165 G .346
(ments are not restricted).165 F(to data sizes which are po)86.4 378.8 Q
(wers of tw)-.275 E(o.)-.11 E 518.397 390.05 86.4 390.05 DL F1 -1.012(Ta)
189.153 400.3 S(ble 7a: T)1.012 E(otal P)-1.012 E(erf)-.22 E(ormance Impr)-.275
E -.11(ove)-.198 G(ment \(386\)).11 E(59 bytes)261.589 413.3 Q(64 bytes)327.693
413.3 Q(509 bytes)393.797 413.3 Q(512 bytes)465.401 413.3 Q 518.397 418.05 86.4
418.05 DL F0(initial UDP/IP & sock)95.704 428.3 Q 59.96(et 202.19)-.11 F 38.604
(193.37 264.21 253.45)329.832 428.3 R(optimized UDP/IP & sock)95.704 441.3 Q
41.634(et 134.91)-.11 F 38.604(140.88 181.37 177.05)329.832 441.3 R
(UDP/IP & sock)95.704 454.3 Q(et impro)-.11 E -.165(ve)-.165 G 32.801
(ment 74.86).165 F 44.104(66.31 90.46 85.57)335.332 454.3 R 518.397 459.05 86.4
459.05 DL(initial total k)95.704 469.3 Q 87.163(ernel 927.12)-.11 F 33.104
(936.03 1034.35 1018.36)329.832 469.3 R(optimized total k)95.704 482.3 Q 68.837
(ernel 808.63)-.11 F 38.604(811.50 869.76 854.58)329.832 482.3 R(total k)95.704
495.3 Q(ernel impro)-.11 E -.165(ve)-.165 G 54.504(ment 118.49).165 F 38.604
(124.53 164.59 163.78)329.832 495.3 R 518.397 500.05 86.4 500.05 DL 2.75(%U)
95.704 510.3 S(DP impro)115.559 510.3 Q -.165(ve)-.165 G 75.778(ment 36%).165 F
48.691(32% 33% 32.6%)335.332 510.3 R 2.75(%K)95.704 523.3 S(ernel impro)115.284
523.3 Q -.165(ve)-.165 G 68.122(ment 12.8%).165 F 40.441(13.3% 15.9% 16.1%)
335.332 523.3 R 518.397 528.05 86.4 528.05 DL 451.445 403.05 451.445 528.05 DL
379.841 403.05 379.841 528.05 DL 313.737 403.05 313.737 528.05 DL 247.633
403.05 247.633 528.05 DL 518.397 390.05 518.397 528.05 DL 86.4 390.05 86.4
528.05 DL 518.389 540.55 86.4 540.55 DL F1 -1.012(Ta)183.44 550.8 S(ble 7b: T)
1.012 E(otal P)-1.012 E(erf)-.22 E(ormance Impr)-.275 E -.11(ove)-.198 G
(ment \(Spar).11 E(c\))-.198 E(59 bytes)261.499 563.8 Q(64 bytes)328.299 563.8
Q(509 bytes)394.489 563.8 Q(512 bytes)465.568 563.8 Q F0(initial UDP/IP & sock)
95.529 576.8 Q 62.796(et 92.32)-.11 F 44.189(83.11 93.00)333.189 576.8 R(91.48)
475.957 576.8 Q(optimized UDP/IP & sock)95.529 589.8 Q 44.47(et 55.57)-.11 F
44.189(58.53 68.95)333.189 589.8 R(64.17)475.957 589.8 Q(UDP/IP & sock)95.529
602.8 Q(et impro)-.11 E -.165(ve)-.165 G 30.137(ment 36.75).165 F 44.189
(24.58 24.05)333.189 602.8 R(27.31)475.957 602.8 Q 518.389 607.55 86.4 607.55
DL(initial total k)95.529 617.8 Q 84.499(ernel 184.40)-.11 F 38.689
(181.42 207.06)327.689 617.8 R(211.33)470.457 617.8 Q(optimized total k)95.529
630.8 Q 66.173(ernel 151.00)-.11 F 38.689(147.77 178.25)327.689 630.8 R(175.15)
470.457 630.8 Q 518.389 635.55 86.4 635.55 DL 2.75(%U)95.529 645.8 S(DP impro)
115.384 645.8 Q -.165(ve)-.165 G 73.114(ment 39.8%).165 F 40.526(29.6% 25.9%)
333.189 645.8 R(29.9%)475.957 645.8 Q 2.75(%K)95.529 658.8 S(ernel impro)
115.109 658.8 Q -.165(ve)-.165 G 65.458(ment 18.11%).165 F 35.026(18.54% 13.9%)
333.189 658.8 R(17.1%)475.957 658.8 Q 518.389 663.55 86.4 663.55 DL 451.874
553.55 451.874 663.55 DL 380.795 553.55 380.795 663.55 DL 313.995 553.55
313.995 663.55 DL 247.195 553.55 247.195 663.55 DL 518.389 540.55 518.389
663.55 DL 86.4 540.55 86.4 663.55 DL 1.311(The results are generally v)111.4
681.4 R 1.311(ery good.)-.165 F 1.31
(UDP performance across both CISC and RISC sys-)6.811 F(tems impro)86.4 694.4 Q
-.165(ve)-.165 G 2.75(da).165 G(bout 30% and o)159.396 694.4 Q -.165(ve)-.165 G
(rall k).165 E(ernel performance impro)-.11 E -.165(ve)-.165 G 2.75(db).165 G
(etween 12% and 18%)394.763 694.4 Q(From)181.796 769 Q/F2 11/Times-Italic@0 SF
(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F0
(\(August 1993\))2.75 E EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-17-)293.237 49 Q/F1 11/Times-Bold@0 SF 2.75
(8.2. Signi\214cance)86.4 85 R(of Results)2.75 E F0 2.295 -.88(We s)111.4 101.6
T .535(et out to optimize UDP as an e).88 F -.165(xe)-.165 G .536
(rcise in applying optimizations used on TCP to other).165 F 2.75
(protocols. Broadly)86.4 114.6 R(speaking, the optimizations that w)2.75 E(ork)
-.11 E(ed well took one of three forms:)-.11 E 14(1. Caches)111.4 131.2 R 1.661
(were used to e)4.411 F 1.66(xploit locality)-.165 F 7.16(.A)-.715 G 1.66
(one-behind sender and recei)325.256 131.2 R -.165(ve)-.275 G 4.41(rc).165 G
1.66(ache w)476.843 131.2 R(as)-.11 E 2.75(added. Mb)136.4 144.2 R
(ufs were cached in)-.22 E/F2 11/Helvetica@0 SF(sendit)2.75 E F0(.)A 14
(2. Expensi)111.4 160.8 R .795 -.165(ve g)-.275 H .466(eneral purpose code w)
.165 F .466(as replaced with code tuned to the particular proto-)-.11 F(col.)
136.4 173.8 Q F2(Sosend)6.085 E F0 -.11(wa)3.335 G 3.334(sr).11 G .584
(eplaced with)223.305 173.8 R F2(udp_sosend)3.334 E F0 .584
(and the IP header checksum w)3.334 F .584(as com-)-.11 F
(puted in-line rather than in a general purpose subroutine.)136.4 186.8 Q 14
(3. Memory)111.4 203.4 R 1.76(accesses were reduced.)4.51 F 1.76(In this e)7.26
F 1.76(xperiment, the checksum and cop)-.165 F 4.511(yl)-.11 G(oops)497.621
203.4 Q(were combined.)136.4 216.4 Q 2.126(These all are general techniques.)
86.4 233 R(The)7.625 E 4.875(yw)-.165 G(ork)281.543 233 Q 2.125
(ed well when applied to TCP and ha)-.11 F 2.455 -.165(ve w)-.22 H(ork).055 E
(ed)-.11 E 1.187(equally well when applied to UDP)86.4 246 R 6.687(.R)-1.221 G
1.187(ecent w)259.732 246 R 1.187(ork by Sample and Neufeld has sho)-.11 F
1.187(wn that these)-.275 F .123
(same techniques can also be applied to making e)86.4 259 R .122
(xternal data format con)-.165 F -.165(ve)-.44 G .122(rsion run f).165 F .122
(ast [17].)-.11 F(The)5.622 E(implication is that these techniques should be r\
outinely applied to protocol implementations.)86.4 272 Q F1 2.75
(8.3. Optimizations)86.4 298 R(Not T)2.75 E(ested)-1.012 E F0 .137
(There are at least three optimizations that are belie)111.4 314.6 R -.165(ve)
-.275 G 2.887(dt).165 G 2.887(oi)356.272 314.6 S(mpro)367.717 314.6 Q .467
-.165(ve p)-.165 H .137(rotocol performance that).165 F
(could not be tested in our test en)86.4 327.6 Q(vironment.)-.44 E 1.189
(The \214rst optimization is to b)111.4 344.2 R 1.189(uild a better netw)-.22 F
1.189(ork interf)-.11 F 3.939(ace. As)-.11 F 1.188(protocol processing costs)
3.939 F(ha)86.4 357.2 Q 1.621 -.165(ve b)-.22 H 1.291
(een reduced, it has become increasingly clear that netw).165 F 1.292(ork de)
-.11 F 1.292(vice dri)-.275 F -.165(ve)-.275 G 1.292(rs are often both).165 F
1.617(performance pigs \(requiring lots of code to manage\) and manage data b)
86.4 370.2 R(uf)-.22 E 1.616(fers poorly \(causing)-.275 F .257(increased o)
86.4 383.2 R -.165(ve)-.165 G .257(rhead in data handling\).).165 F .257
(Recently there has been consider success in b)5.757 F .257(uilding better)-.22
F(netw)86.4 396.2 Q 2.836(ork interf)-.11 F 2.835
(aces, most notably the Medusa and Afterb)-.11 F 2.835(urner interf)-.22 F
2.835(aces b)-.11 F 2.835(uilt by a team at)-.22 F(He)86.4 409.2 Q .555
(wlett P)-.275 F .555(ackard [13,14].)-.165 F .555(These interf)6.055 F .555
(aces are designed to minimize de)-.11 F .556(vice dri)-.275 F -.165(ve)-.275 G
3.306(rc).165 G(omple)460.864 409.2 Q .556(xity \(it)-.165 F 1.08
(is a matter of a fe)86.4 422.2 R 3.83(wi)-.275 G 1.08
(nstructions to send or recei)183.025 422.2 R 1.41 -.165(ve a p)-.275 H(ack)
.165 E 1.08(et\) and pro)-.11 F 1.079(vide better b)-.165 F(uf)-.22 E 1.079
(fer manage-)-.275 F 3.798(ment. Unfortunately)86.4 435.2 R 3.798(,a)-.715 G
3.798(ni)190.125 435.2 S(nterf)202.481 435.2 Q 1.048(ace b)-.11 F 1.048
(uilt along these lines w)-.22 F 1.049(as not a)-.11 F -.275(va)-.22 G 1.049
(ilable for either of our test).275 F(systems.)86.4 448.2 Q 1.84
(The second optimization is to try to impro)111.4 464.8 R 2.169 -.165(ve c)
-.165 H 1.839(ode locality and reduce instruction cache).165 F .183
(misses in the processor)86.4 477.8 R 5.683(.I)-.605 G 2.933(nR)200.179 477.8 S
.183(ISC processors, it is also possible to impro)215.949 477.8 R .513 -.165
(ve b)-.165 H .184(ranch predictions and).165 F 1.35(minimize branch stalls.)
86.4 490.8 R 1.35(Promising results in this area ha)6.85 F 1.68 -.165(ve b)-.22
H 1.35(een reported by Speer).165 F/F3 11/Times-Italic@0 SF 1.349(et. al.)4.1 F
F0([18])4.099 E(Ho)86.4 503.8 Q(we)-.275 E -.165(ve)-.275 G 1.258 -.44(r, n)
.165 H .378
(either of our tests systems had the compiler support necessary to e).44 F .379
(xperiment with this)-.165 F(type of optimization.)86.4 516.8 Q(Finally)111.4
533.4 Q 4.602(,t)-.715 G 1.852(here has been some interesting w)152.269 533.4 R
1.852(ork with parallelism.)-.11 F -.88(Wo)7.351 G 1.851(rk by Bj").88 F 1.851
(orkman and)464.31 533.4 R(Gunningber)86.4 546.4 Q 3.411(gw)-.198 G .661
(ith TCP [19] and Asthana)155.602 546.4 R F3 .661(et. al.)3.411 F F0 .661
(on a parallel router [20] suggest that by striping)3.411 F 1.378(entire datag\
rams \(rather than pieces of the datagrams\) across processors, it may be poss\
ible to)86.4 559.4 R(achie)86.4 572.4 Q .77 -.165(ve b)-.275 H .44
(etter TCP and IP performance.).165 F(Unfortunately)5.94 E 3.191(,w)-.715 G
3.191(ed)345.539 572.4 S .441(id not ha)359.114 572.4 R .771 -.165(ve a)-.22 H
.441(ccess to a multiproces-).165 F(sor machine to test these ideas.)86.4 585.4
Q F1 2.75(8.4. Generality)86.4 611.4 R(of Results to Differ)2.75 E(ent Hard)
-.198 E(war)-.165 E 2.75(eB)-.198 G(ases)325.353 611.4 Q F0 .291
(The performance impro)111.4 628 R -.165(ve)-.165 G .29
(ments were done on both a CISC processor and a RISC processor).165 F(to e)86.4
641 Q -.275(va)-.275 G(luate the impact of v).275 E(arious performance impro)
-.275 E -.165(ve)-.165 G(ments on dif).165 E(ferent systems.)-.275 E .183
(One of the interesting results is that, e)111.4 657.6 R .184(xcept for the e)
-.165 F .184(xtraordinary o)-.165 F -.165(ve)-.165 G .184(rhead \(particularly)
.165 F 2.934(,p)-.715 G(ri-)508.016 657.6 Q .207
(ority management and interrupt code\) of the 386 processor)86.4 670.6 R 2.956
(,e)-.44 G .206(ach optimization had a similar ef)356.649 670.6 R(fect)-.275 E
.241(on both processors.)86.4 683.6 R .241
(This suggests, though by no means pro)5.741 F -.165(ve)-.165 G .241
(s, that the optimizations are general).165 F
(rather than processor speci\214c.)86.4 696.6 Q(Recently)111.4 713.2 Q 3.207
(,t)-.715 G(here')158.805 713.2 Q 3.207(sb)-.605 G .456
(een some debate about whether combining the checksum and cop)193.78 713.2 R
3.206(yl)-.11 G(oops)497.621 713.2 Q 2.184
(is a general solution or speci\214c to certain machine architectures.)86.4
726.2 R 2.184(The e)7.684 F 2.184(vidence is some)-.275 F(what)-.275 E(From)
181.796 769 Q F3(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking)
.165 E F0(\(August 1993\))2.75 E EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-18-)293.237 49 Q(mix)86.4 85 Q(ed.)-.165 E .44 LW
518.393 96.25 86.4 96.25 DL/F1 11/Times-Bold@0 SF -1.012(Ta)187.089 106.5 S
(ble 8: Cost of Adding Checksum to Copy Loop)1.012 E 109.394(System copy)94.254
119.5 R(copy and checksum)304.889 119.5 Q(additional cost)434.56 119.5 Q F0
65.195(ns/byte ns/byte)235.113 132.5 R(ns/byte)453.051 132.5 Q 518.393 137.25
86.4 137.25 DL 86.008(HP9000/370 122)94.254 147.5 R 97.133(144 18%)338.351
147.5 R 518.393 152.25 86.4 152.25 DL 81.74(Sparcstation1 164)94.254 162.5 R
102.633(177 8%)338.351 162.5 R 518.393 167.25 86.4 167.25 DL 81.74
(Sparcstation2 109)94.254 177.5 R 102.633(109 0%)338.351 177.5 R 518.393 182.25
86.4 182.25 DL 91.508(HP9000/720 54)94.254 192.5 R 102.633(54 0%)343.851 192.5
R 518.393 197.25 86.4 197.25 DL(DECstation 5000/133)94.254 207.5 Q
(\(R3000 CPU\))94.254 220.5 Q 77.723(82.5 99.5)244.128 220.5 R(20%)454.734
220.5 Q 518.393 225.25 86.4 225.25 DL(DECstation 2100)94.254 235.5 Q
(\(R2000 CPU\))94.254 248.5 Q 80.473(288 292)238.628 248.5 R(1.4%)460.234 248.5
Q 415.562 109.25 415.562 251.25 DL 285.891 109.25 285.891 251.25 DL 216.115
109.25 216.115 251.25 DL 518.393 253.25 86.4 253.25 DL/F2 10/Times-Roman@0 SF
-1.11(Va)94.254 263.5 S 1.231(lues for HP9000s and Sparcstations from V)1.11 F
1.231(an Jacobson.)-1.11 F -1.11(Va)6.231 G 1.231(lues for DECstations)1.11 F
2.29(from Peter Desno)94.254 276.5 R 4.791(yers. All)-.1 F -.25(va)4.791 G
2.291(lues are for transfering uncached data.).25 F 2.291(Results for)7.291 F
(cached data typically sho)94.254 289.5 Q 2.5(ws)-.25 G
(lightly higher costs for adding the checksum.)208.424 289.5 Q 518.393 294.25
86.4 294.25 DL 518.393 96.25 518.393 294.25 DL 86.4 96.25 86.4 294.25 DL F0
-.77(Te)111.4 312.1 S .657(sts on a number of machines ha).77 F .987 -.165
(ve s)-.22 H(ho).165 E .657(wn that a combined cop)-.275 F 3.407(ya)-.11 G .657
(nd checksum loop runs)414.69 312.1 R .491(only v)86.4 325.1 R .491
(ery slightly slo)-.165 F .491(wer than the cop)-.275 F 3.242(yl)-.11 G .492
(oop alone.)266.807 325.1 R .492(The results for se)5.992 F -.165(ve)-.275 G
.492(ral dif).165 F .492(ferent w)-.275 F(orkstations)-.11 E 1.138
(architectures are summarized in T)86.4 338.1 R 1.138(able 8.)-.88 F(Ho)6.638 E
(we)-.275 E -.165(ve)-.275 G 2.018 -.44(r, i).165 H 3.887(ns).44 G 1.137
(ystems where the only memory cop)339.373 338.1 R 3.887(yi)-.11 G(s)514.121
338.1 Q 1.535(between application b)86.4 351.1 R(uf)-.22 E 1.535
(fers and the netw)-.275 F 1.535(ork interf)-.11 F 1.535
(ace, it may be more ef)-.11 F 1.536(\214cient to do the data)-.275 F(cop)86.4
364.1 Q 2.831(yu)-.11 G .08(sing DMA rather than a softw)116.005 364.1 R .08
(are loop [21].)-.11 F .08(The emer)5.58 F .08
(ging principle seems to be that if one)-.198 F .45(has to do a cop)86.4 377.1
R 3.2(yl)-.11 G .45(oop using softw)165.837 377.1 R .45
(are, then the checksum should be combined with the cop)-.11 F 3.201(yl)-.11 G
(oop)501.9 377.1 Q .481(because the checksum adds v)86.4 390.1 R .481
(ery little to the cost.)-.165 F .481(But if the data cop)5.981 F 3.231(yi)-.11
G 3.23(sb)407.536 390.1 S .48(est done by hardw)420.545 390.1 R(are,)-.11 E
(other mechanisms for performing the checksum need to be found.)86.4 403.1 Q F1
2.75(8.5. Conclusion)86.4 429.1 R F0 .022(Recently V)111.4 445.7 R .022
(an Jacobson has informally reported impro)-1.221 F .022
(ving TCP/IP and UDP/IP performance)-.165 F 1.247(in BSD by as much as 95%, by\
 doing a complete reimplementation of the protocols that tak)86.4 458.7 R(es)
-.11 E 6.071(greater adv)86.4 471.7 R 6.071(antage of man)-.275 F 8.822(yo)
-.165 G 8.822(ft)235.48 471.7 S 6.072
(he performance enhancements mentioned abo)251.023 471.7 R -.165(ve)-.165 G
11.572(.T).165 G(he)508.016 471.7 Q(impro)86.4 484.7 Q -.165(ve)-.165 G .618
(ments discussed in this paper are much more modest, b).165 F .618
(ut in the same v)-.22 F 3.368(ein. Our)-.165 F(conclu-)3.368 E 3.171
(sion is that man)86.4 497.7 R 5.922(yp)-.165 G 3.172(roblems e)182.036 497.7 R
3.172(xperienced with protocol performance are more appropriately)-.165 F
(blamed on implementations than the protocols themselv)86.4 510.7 Q(es.)-.165 E
F1 2.75(9. Ackno)86.4 536.7 R(wledgements)-.11 E F0 .4(Thanks to se)111.4 553.3
R -.165(ve)-.275 G .4(ral members of the End-T).165 F .399
(o-End Interest mailing list for se)-.88 F -.165(ve)-.275 G .399
(ral helpful com-).165 F .04(ments and notes while we w)86.4 566.3 R(ork)-.11 E
.04(ed on this ef)-.11 F 2.79(fort. Special)-.275 F .04(thanks are due to V)
2.79 F .04(an Jacobson, man)-1.221 F 2.79(yo)-.165 G(f)514.737 566.3 Q .228
(whose ideas are re\215ected in this w)86.4 579.3 R .228
(ork, and who graciously v)-.11 F .228(olunteered his code for the combined)
-.22 F(checksum and cop)86.4 592.3 Q 2.75(yl)-.11 G(oop on the Sparc.)178.855
592.3 Q F1 -.275(Ap)86.4 618.3 S(pendix I: 386 Copy and Checksum Code).275 E F0
.448(As an e)111.4 634.9 R .449(xample of the combined cop)-.165 F 3.199(ya)
-.11 G .449(nd checksum code, here is an e)285.647 634.9 R .449
(xcerpt from the user)-.165 F(-)-.22 E .147(space v)86.4 647.9 R .147
(ersion of the code for the 386.)-.165 F .146
(Note that this routine returns the 1')5.646 F .146(s-complement sum o)-.605 F
-.165(ve)-.165 G(r).165 E(the data \255 to generate the full IP checksum requi\
res the sum to be complemented.)86.4 659.9 Q/F3 10/Times-Italic@0 SF 2.5(/Cc)
86.4 677.9 S(alling con)105.29 677.9 Q(vention:)-.4 E(/)86.4 689.9 Q/F4 10
/Helvetica@0 SF(in_bcop)2.5 E(y\(from,to)-.3 E
(,count,xsum\); char *from, *to; int count; unsigned shor)-.4 E 2.78(t*).4 G
(xsum)413.74 689.9 Q F3 2.5(/c)86.4 701.9 S(opy)96.12 701.9 Q F4(count)2.5 E F3
(bytes between)2.5 E F4(from)2.5 E F3(and)2.5 E F4(to)2.5 E F3(and put sum in)
2.5 E F4(xsum)2.5 E F2(From)192.76 768 Q F3(IEEE/A)2.5 E(CM T)-.3 E -.15(ra)
-.55 G(ns. on Networking).15 E F2(\(August 1993\))2.5 E EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(-19-)294.07 48 Q(_in_bcop)86.4 84 Q(y:)-.1 E/F1 10
/Helvetica@0 SF(pushl %edi)123.08 96 Q/F2 10/Times-Italic@0 SF 2.5(/s)311.4 96
S(ave various r)320.57 96 Q -.4(eg)-.37 G(ister).4 E(s)-.1 E F1(pushl %esi)
123.08 108 Q(pushl %ebx)123.08 120 Q(pushl %ecx)123.08 132 Q(pushl %edx)123.08
144 Q(mo)123.08 156 Q(vl 20 +12\(%esp\),%edx)-.15 E F2 2.5(/2)311.4 156 S 2.5
(0f)321.68 156 S(or 5 pushes onto stac)331.96 156 Q(k)-.2 E F1(mo)123.08 168 Q
(vl 20 +8\(%esp\),%edi)-.15 E(mo)123.08 180 Q(vl 20 +4\(%esp\),%esi)-.15 E(mo)
123.08 204 Q(vl $0,%eax)-.15 E F2 2.5(/z)311.4 204 S(er)320.57 204 Q 2.5(ot)
-.45 G(he initial xsum)338.73 204 Q F1(mo)123.08 216 Q(vl %edx,%ecx)-.15 E 2.78
(/c)5.56 G(op)215.18 216 Q 2.78(yt)-.3 G(he b)236.56 216 Q(yte count)-.2 E
(js ibout)123.08 228 Q F2 2.5(/i)311.4 228 S 2.5(fb)319.46 228 S(yte count ne)
329.74 228 Q(gative)-.4 E 2.5(,q)-.1 G(uit now)412 228 Q F1 -2.63(sar l)123.08
252 R($5,%ecx)2.78 E F2 2.5(/s)311.4 252 S(tart by adding gr)320.57 252 Q
(oups of 8 long wor)-.45 E(ds)-.37 E F1(dec %ecx)123.08 264 Q F2 2.5(/c)311.4
264 S(ount down to enter loop)321.12 264 Q F1(jl ibL2)123.08 276 Q F2 2.5(/j)
311.4 276 S(ump to code to do smaller units of data)319.46 276 Q F1(ibL1:)86.4
288 Q(addl \(%esi\),%eax)123.08 300 Q F2 2.5(/t)311.4 300 S(his or)319.46 300 Q
(dering runs best in our cac)-.37 E(he)-.15 E F1(mo)123.08 312 Q(vsl)-.15 E
(adcl \(%esi\),%eax)123.08 324 Q(mo)123.08 336 Q(vsl)-.15 E(adcl \(%esi\),%eax)
123.08 348 Q(mo)123.08 360 Q(vsl)-.15 E(adcl \(%esi\),%eax)123.08 372 Q(mo)
123.08 384 Q(vsl)-.15 E(addl \(%esi\),%eax)123.08 396 Q(mo)123.08 408 Q(vsl)
-.15 E(adcl \(%esi\),%eax)123.08 420 Q(mo)123.08 432 Q(vsl)-.15 E
(adcl \(%esi\),%eax)123.08 444 Q(mo)123.08 456 Q(vsl)-.15 E(adcl \(%esi\),%eax)
123.08 468 Q(mo)123.08 480 Q(vsl)-.15 E(adcl $0,%eax)123.08 492 Q F2 2.5(/f)
311.4 492 S(old in carry bit befor)319.46 492 Q 2.5(ed)-.37 G(oing dec)414.92
492 Q F1(dec %ecx)123.08 504 Q F2 2.5(/d)311.4 504 S(ecr)321.68 504 Q
(ement 8 long wor)-.37 E 2.5(dc)-.37 G(ount)415.37 504 Q F1(jge ibL1)123.08 516
Q F2 2.5(/f)311.4 516 S(all thr)319.46 516 Q(ough to code to handle)-.45 E 2.5
(/s)311.4 528 S(maller units of data)320.57 528 Q F1(ibL2:)86.4 552 Q F2(/do r)
311.4 552 Q(emaining data her)-.37 E(e)-.37 E/F3 11/Times-Bold@0 SF(Refer)86.4
584 Q(ences)-.198 E/F4 11/Times-Roman@0 SF 14(1. Jon)86.4 604.2 R 1.054
(B. Postel, `)3.804 F 1.054(`User Datagram Protocol; RFC-768,)-.814 F -.814('')
-.77 G/F5 11/Times-Italic@0 SF 1.054(Internet Requests for Comments)4.618 F F4
3.804(,n)C(o.)510.15 604.2 Q(768, August 1980.)111.4 617.2 Q 14(2. V)86.4 633.8
R 3.918(.S)-1.419 G(rini)130.707 633.8 Q -.275(va)-.275 G 1.167(san and Jef)
.275 F(fre)-.275 E 3.917(yC)-.165 G 3.917(.M)235.551 633.8 S 1.167(ogul, `)
251.997 633.8 R 1.167(`Spritely NFS: Experiments with Cache-Consistenc)-.814 F
(y)-.165 E(Protocols,)111.4 646.8 Q -.814('')-.77 G F5(Pr)4.451 E .887
(oc. 12th A)-.495 F .888(CM Symposium on Oper)-.33 F .888
(ating Systems Principles)-.165 F F4 3.638(,L)C .888(itch\214eld P)455.956
646.8 R(ark,)-.165 E(Arizona, December 3-6, 1989.)111.4 659.8 Q 14(3. V)86.4
676.4 R 3.179(.J)-1.419 G .429(acobson, `)128.131 676.4 R .429
(`4BSD Header Prediction,)-.814 F -.814('')-.77 G F5 .429
(Computer Communication Re)3.993 F(vie)-.165 E(w)-.165 E F4 3.179(,v)C .429
(ol. 20, no. 2,)461.805 676.4 R(pp. 13-15, A)111.4 689.4 Q
(CM SIGCOMM, April 1990.)-.44 E 14(4. P)86.4 706 R(.V)-1.221 E 3.025(.M)-1.419
G .276(ockapetris and K. Dunlap, `)141.122 706 R(`De)-.814 E -.165(ve)-.275 G
.276(lopment of the Domain Name System,).165 F -.814('')-.77 G F5(Pr)3.84 E
.276(oc. A)-.495 F(CM)-.33 E(SIGCOMM '88)111.4 719 Q F4 2.75(,p)C
(p. 123-133, Stanford, USA, 16-19 August 1988.)190.523 719 Q(From)181.796 769 Q
F5(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G(ns. on Networking).165 E F4
(\(August 1993\))2.75 E EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(-20-)293.237 49 Q 14(5. Sun)86.4 85 R .813
(Microsystems, `)3.563 F .813(`NFS: Netw)-.814 F .813
(ork File System Protocol speci\214cation; RFC-1094,)-.11 F -.814('')-.77 G/F1
11/Times-Italic@0 SF(Inter)4.376 E(-)-.22 E(net Requests for Comments)111.4 98
Q F0 2.75(,n)C(o. 1094, March 1989.)242.476 98 Q 14(6. D.L.)86.4 114.6 R .348
(Mills, `)3.098 F(`Netw)-.814 E .348(ork T)-.11 F .349(ime Protocol \(V)-.385 F
.349(ersion 3\): Speci\214cation, implementation, and analy-)-1.221 F 2.067
(sis; RFC-1305,)111.4 127.6 R -.814('')-.77 G F1 2.067
(Internet Requests for Comments)5.631 F F0 4.817(,n)C 2.067(o. 1305, DDN Netw)
351.381 127.6 R 2.066(ork Information)-.11 F(Center, March 1992.)111.4 140.6 Q
14(7. D.D.)86.4 157.2 R .004(Clark, V)2.754 F 2.754(.J)-1.419 G .004
(acobson, J. Romk)181.79 157.2 R -.165(ey)-.11 G 2.755(,a)-.55 G .005
(nd H. Sal)279.803 157.2 R .005(wen, `)-.11 F -.88(`A)-.814 G 2.755(nA).88 G
.005(nalysis of TCP Processing Ov)374.555 157.2 R(er)-.165 E(-)-.22 E(head,)
111.4 170.2 Q -.814('')-.77 G F1(IEEE Communications)3.564 E F0 2.75(,v)C
(ol. 27, no. 6, pp. 23-29, June 1989.)255.324 170.2 Q 14(8. Jef)86.4 186.8 R
(fre)-.275 E 4.649(yC)-.165 G 4.649(.M)153.482 186.8 S 1.899(ogul, `)170.66
186.8 R(`Netw)-.814 E 1.898(ork Locality at the Scale of Processes,)-.11 F
-.814('')-.77 G F1(Pr)5.462 E 1.898(oc. SIGCOMM '91)-.495 F F0(,)A
(Zurich, Switzerland, September 3-6, 1991.)111.4 199.8 Q 14(9. P)86.4 216.4 R
.038(.E. McK)-1.221 F(enne)-.275 E 2.788(ya)-.165 G .038(nd K.F)187.409 216.4 R
2.788(.D)-.88 G -.165(ove)230.605 216.4 S 2.788(,`).165 G(`Ef)254.546 216.4 Q
.038(\214cient Demultiple)-.275 F .038(xing of Incoming TCP P)-.165 F(ack)-.165
E(ets,)-.11 E -.814('')-.77 G F1(Pr)3.602 E(oc.)-.495 E -.33(AC)111.4 229.4 S
2.75(MS).33 G(IGCOMM '92)142.541 229.4 Q F0 2.75(,p)C
(p. 269-280, Baltimore, MD, August 1992.)216.164 229.4 Q 8.5(10. J.)86.4 246 R
1.119(Kay and J. P)3.869 F 1.118(asquale, `)-.165 F 1.118
(`The Importance of Non-Data T)-.814 F 1.118(ouching Processing Ov)-.88 F 1.118
(erheads in)-.165 F(TCP/IP)111.4 259 Q -.77(,')-1.221 G(')-.044 E F1(Pr)2.75 E
(oc. A)-.495 E(CM SIGCOMM '93)-.33 E F0 2.75(,S)C
(an Francisco, USA, 15-17 September 1993.)286.201 259 Q 8.5(11. D.D.)86.4 275.6
R(Clark,)2.75 E F1(SIGCOMM A)2.75 E(war)-.605 E 2.75(dL)-.407 G(ectur)256.127
275.6 Q(e)-.407 E F0 2.75(,1)C(990.)294.209 275.6 Q 8.5(12. V)86.4 292.2 R 2.75
(.J)-1.419 G(acobson,)127.702 292.2 Q F1 -.605(Tu)2.75 G(torial Notes fr).605 E
(om SIGCOMM '90)-.495 E F0 2.75(,P)C(hiladelphia, USA, September 1990.)338.044
292.2 Q 8.5(13. D.)86.4 308.8 R 1.642(Banks and M. Prudence, `)4.392 F 3.403
-.88(`A H)-.814 H 1.643(igh Performance Netw).88 F 1.643
(ork Architecture for a P)-.11 F(A-RISC)-1.012 E -.88(Wo)111.4 321.8 S
(rkstation,).88 E -.814('')-.77 G F1 1.124(IEEE J)4.688 F(our)-.275 E 3.874(.S)
-1.221 G 1.124(elected Ar)235.761 321.8 R 1.124(eas in Communications)-.407 F
F0 3.874(,v)C 1.124(ol. 10, no. 1, pp. 191-202,)398.811 321.8 R(February 1993.)
111.4 334.8 Q 8.5(14. G.)86.4 351.4 R -.88(Wa)3.132 G .382
(tson, D. Banks, C. Calamv).88 F .382(okis, C. Dalton, A. Edw)-.22 F .383
(ards, and J. Lumle)-.11 F 1.813 -.715(y, `)-.165 H -.88(`A)-.099 G(fterb).88 E
(urner:)-.22 E 1.635(Architectural support for high performance protocols.,)
111.4 364.4 R -.814('')-.77 G F1 1.634(IEEE Network Ma)5.199 F(gazine)-.11 E F0
4.384(,v)C 1.634(ol. 7,)494.458 364.4 R(no. 4.)111.4 377.4 Q 8.5(15. S.J.)86.4
394 R(Lef)3.185 E(\215er)-.275 E 3.185(,M)-.44 G .435(.K. McK)175.41 394 R .435
(usick, M.J. Karels, and J.S. Quarterman,)-.165 F F1 .436
(The Design and Implemen-)3.186 F(tation of the 4.3BSD)111.4 407 Q/F2 10
/Times-Italic@0 SF(UNIX)2.75 E F1(Oper)2.75 E(ating System)-.165 E F0 2.75(,p)C
(p. Addison-W)319.42 407 Q(esle)-.88 E(y, 1989.)-.165 E 8.5(16. Jon)86.4 423.6
R 2.025(B. Postel, `)4.775 F 2.025(`Discard Protocol; RFC-863,)-.814 F -.814
('')-.77 G F1 2.025(Internet Requests for Comments)5.589 F F0 4.775(,n)C 2.025
(o. 863,)486.125 423.6 R(May 1983.)111.4 436.6 Q 8.5(17. M.)86.4 453.2 R 1.006
(Sample and G. Neufeld, `)3.756 F 1.006(`Implementing Ef)-.814 F 1.006
(\214cient Encoders and Decoders for Netw)-.275 F(ork)-.11 E .028
(Data Representations,)111.4 466.2 R -.814('')-.77 G F1(Pr)3.592 E .028
(oc. IEEE INFOCOM '93)-.495 F F0 2.778(,p)C .028
(p. 1144-1153, San Francisco, USA, 30)348.079 466.2 R(March-1 April 1993.)111.4
479.2 Q 8.5(18. S.E.)86.4 495.8 R(Speer)4.173 E 4.173(,R)-.44 G 4.173(.K)
172.777 495.8 S(umar)187.477 495.8 Q 4.173(,a)-.44 G 1.423(nd C. P)221.449
495.8 R(artridge,)-.165 E F1(Impr)4.174 E -.11(ov)-.495 G 1.424(ing UNIX K).11
F 1.424(ernel and Networking P)-.385 F(erfor)-.88 E(-)-.22 E(mance using Pr)
111.4 508.8 Q(o\214le Based Optimization \(T)-.495 E(ec)-1.012 E
(hnical Report\))-.165 E F0 2.75(,A)C(ugust 1993.)387.148 508.8 Q 8.5(19. M.)
86.4 525.4 R(Bj")3.831 E 1.081(orkman and P)138.155 525.4 R 3.83(.G)-1.221 G
(unningber)214.722 525.4 Q 1.08(g, `)-.198 F 1.08(`Locking Ef)-.814 F 1.08
(fects in Multiprocessor Implementation of)-.275 F(Protocols,)111.4 538.4 Q
-.814('')-.77 G F1(Pr)3.564 E(oc. A)-.495 E(CM SIGCOMM '93)-.33 E F0 2.75(,S)C
(an Francisco, USA.)295.969 538.4 Q 8.5(20. A.)86.4 555 R .201
(Asthana, C. Delph, H.V)2.951 F 2.951(.J)-1.419 G(ag)239.609 555 Q .201
(adish, and P)-.055 F 2.951(.K)-1.221 G(rzyzano)316.233 555 Q .202(wski, `)
-.275 F(`T)-.814 E -2.31 -.275(ow a)-.88 H .202(rds a Gig).275 F .202
(abit IP Router)-.055 F -.77(,')-.44 G(')-.044 E F1 -.275(Jo)111.4 568 S(ur)
.275 E 2.75(.o)-1.221 G 2.75(fH)141.067 568 S(igh Speed Networks)154.817 568 Q
F0 2.75(,v)C(ol. 1, no. 4, pp. 281-288, 1992.)252.981 568 Q 8.5(21. J.M.)86.4
584.6 R .345(Smith and G.Q. Maguire, Jr)3.095 F .344(., `)-.605 F .344
(`Measured Response T)-.814 F .344(imes for P)-.385 F .344
(age-Sized Fetches on a)-.165 F(Netw)111.4 597.6 Q(ork,)-.11 E -.814('')-.77 G
F1 -.33(AC)3.798 G 2.984(MS).33 G .234(IGARCH Computer Ar)192.63 597.6 R -.165
(ch)-.407 G(itectur).165 E 2.985(eN)-.407 G -.165(ew)347.256 597.6 S(s).165 E
F0 2.985(,v)C .235(ol. 17, no. 5, pp. 71-77, Septem-)374.606 597.6 R(ber 1989.)
111.4 610.6 Q(From)181.796 769 Q F1(IEEE/A)2.75 E(CM T)-.33 E -.165(ra)-.605 G
(ns. on Networking).165 E F0(\(August 1993\))2.75 E EP
%%Trailer
end
%%EOF
